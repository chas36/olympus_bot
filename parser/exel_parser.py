import openpyxl
from typing import List, Dict
import logging

logger = logging.getLogger(__name__)


class StudentExcelParser:
    """–ü–∞—Ä—Å–µ—Ä Excel —Ñ–∞–π–ª–æ–≤ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–µ–Ω–∏–∫–æ–≤"""
    
    def __init__(self, file_path: str):
        self.file_path = file_path
        self.workbook = openpyxl.load_workbook(file_path, data_only=True)
        
    def parse(self) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç Excel —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
        
        Returns:
            List[Dict] —Å –∫–ª—é—á–∞–º–∏: full_name, class_number
        """
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: {self.file_path}")
        
        students = []
        sheet = self.workbook.active
        
        # –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        header_row = None
        fio_col = None
        class_col = None
        
        for row_idx, row in enumerate(sheet.iter_rows(max_row=10), start=1):
            for col_idx, cell in enumerate(row, start=1):
                if cell.value:
                    cell_text = str(cell.value).lower().strip()
                    
                    if '—Ñ–∏–æ' in cell_text or '–∏–º—è' in cell_text:
                        fio_col = col_idx
                        header_row = row_idx
                    elif '–∫–ª–∞—Å—Å' in cell_text:
                        class_col = col_idx
                        header_row = row_idx
            
            if fio_col and class_col:
                break
        
        if not fio_col or not class_col:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –§–ò–û –∏ –ö–ª–∞—Å—Å –≤ —Ç–∞–±–ª–∏—Ü–µ")
        
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏: –§–ò–û - {fio_col}, –ö–ª–∞—Å—Å - {class_col}")
        logger.info(f"–°—Ç—Ä–æ–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {header_row}")
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row_idx, row in enumerate(sheet.iter_rows(min_row=header_row + 1), start=header_row + 1):
            fio_cell = row[fio_col - 1]
            class_cell = row[class_col - 1]
            
            if not fio_cell.value:
                continue
            
            full_name = str(fio_cell.value).strip()
            
            # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞
            class_value = str(class_cell.value).strip() if class_cell.value else ""
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "8–ê", "9 –ë", "11"
                class_number = int(''.join(filter(str.isdigit, class_value)))
                
                if not (4 <= class_number <= 11):
                    logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {row_idx}: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å {class_value}")
                    continue
                
                students.append({
                    "full_name": full_name,
                    "class_number": class_number,
                    "row_number": row_idx
                })
                
            except (ValueError, TypeError) as e:
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ —Å—Ç—Ä–æ–∫–∏ {row_idx}: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∞—Å—Å–∞ '{class_value}' - {e}")
                continue
        
        logger.info(f"–£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ {len(students)} —É—á–µ–Ω–∏–∫–æ–≤")
        
        return students
    
    def validate(self, students: List[Dict]) -> Dict:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        """
        issues = {
            "duplicates": [],
            "invalid_names": [],
            "class_distribution": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        seen_names = {}
        for student in students:
            name = student["full_name"]
            if name in seen_names:
                issues["duplicates"].append({
                    "name": name,
                    "rows": [seen_names[name], student["row_number"]]
                })
            else:
                seen_names[name] = student["row_number"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω
        for student in students:
            name = student["full_name"]
            # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞
            if len(name.split()) < 2:
                issues["invalid_names"].append({
                    "name": name,
                    "row": student["row_number"]
                })
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º
        for student in students:
            class_num = student["class_number"]
            issues["class_distribution"][class_num] = issues["class_distribution"].get(class_num, 0) + 1
        
        return issues


def parse_students_excel(file_path: str) -> tuple[List[Dict], Dict]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel —Ñ–∞–π–ª–∞
    
    Args:
        file_path: –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
        
    Returns:
        tuple: (—Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
    """
    parser = StudentExcelParser(file_path)
    students = parser.parse()
    validation = parser.validate(students)
    
    return students, validation


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python excel_parser.py <—Ñ–∞–π–ª.xlsx>")
        sys.exit(1)
    
    students, validation = parse_students_excel(sys.argv[1])
    
    print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}")
    print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for class_num in sorted(validation["class_distribution"].keys()):
        count = validation["class_distribution"][class_num]
        print(f"  {class_num} –∫–ª–∞—Å—Å: {count} —É—á–µ–Ω–∏–∫–æ–≤")
    
    if validation["duplicates"]:
        print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(validation['duplicates'])}")
        for dup in validation["duplicates"][:5]:
            print(f"  - {dup['name']} (—Å—Ç—Ä–æ–∫–∏ {dup['rows']})")
    
    if validation["invalid_names"]:
        print(f"\n‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞: {len(validation['invalid_names'])}")
        for inv in validation["invalid_names"][:5]:
            print(f"  - {inv['name']} (—Å—Ç—Ä–æ–∫–∞ {inv['row']})")