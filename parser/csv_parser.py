import csv
import re
from typing import Dict, List, Optional
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class CodesCSVParser:
    """–ü–∞—Ä—Å–µ—Ä CSV —Ñ–∞–π–ª–æ–≤ —Å –∫–æ–¥–∞–º–∏ –æ–ª–∏–º–ø–∏–∞–¥ (—Ç–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)"""
    
    def __init__(self, file_path: str, encoding: str = 'utf-8'):
        self.file_path = file_path
        self.encoding = encoding
        
    def parse(self) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç CSV —Ñ–∞–π–ª —Å –∫–æ–¥–∞–º–∏
        
        –§–æ—Ä–º–∞—Ç:
        - –°—Ç—Ä–æ–∫–∞ 1: –∑–∞–≥–æ–ª–æ–≤–∫–∏ (A1=–∫–ª–∞—Å—Å, E1+=–ø—Ä–µ–¥–º–µ—Ç—ã)
        - –°—Ç—Ä–æ–∫–∞ 2: –¥–∞—Ç—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        - –°—Ç—Ä–æ–∫–∏ 3+: –∫–æ–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        
        Returns:
            List[Dict] - —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–æ–¥–∞–º–∏:
            {
                "subject": –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞,
                "date": –¥–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–∞),
                "class_number": –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞,
                "codes": [—Å–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤]
            }
        """
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: {self.file_path}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª–∞—Å—Å –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        class_number = None
        filename_match = re.search(r'_(\d{1,2})\.csv', self.file_path)
        if filename_match:
            class_number = int(filename_match.group(1))
            logger.info(f"–ö–ª–∞—Å—Å –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {class_number}")
        
        # –ß–∏—Ç–∞–µ–º CSV
        results = []
        
        with open(self.file_path, 'r', encoding=self.encoding) as f:
            reader = csv.reader(f, delimiter=';')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º ; –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            rows = list(reader)
        
        if len(rows) < 3:
            logger.warning("–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 3 —Å—Ç—Ä–æ–∫, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å")
            return results
        
        # –°—Ç—Ä–æ–∫–∞ 1: –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –∫–æ–ª–æ–Ω–∫–∏ E, –∏–Ω–¥–µ–∫—Å 4)
        header_row = rows[0]
        
        # –°—Ç—Ä–æ–∫–∞ 2: –¥–∞—Ç—ã
        dates_row = rows[1]
        
        # –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω –∏–∑ –∏–º–µ–Ω–∏, –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ A1
        if not class_number and len(header_row) > 0:
            match = re.search(r'(\d+)', header_row[0])
            if match:
                class_number = int(match.group(1))
                logger.info(f"–ö–ª–∞—Å—Å –∏–∑ A1: {class_number}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü –Ω–∞—á–∏–Ω–∞—è —Å E (–∏–Ω–¥–µ–∫—Å 4)
        for col_idx in range(4, len(header_row)):
            subject = header_row[col_idx].strip()
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            if not subject:
                continue
            
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: {subject} (–∫–æ–ª–æ–Ω–∫–∞ {col_idx})")
            
            # –î–∞—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            date_str = dates_row[col_idx].strip() if col_idx < len(dates_row) else ""

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            parsed_date = None
            if date_str:
                parsed_date = self._parse_date(date_str)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–¥—ã –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞—è —Å 3-–π (–∏–Ω–¥–µ–∫—Å 2)
            codes = []
            for row_idx in range(2, len(rows)):
                row = rows[row_idx]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
                if col_idx < len(row):
                    code = row[col_idx].strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥
                    if code and self._is_valid_code(code):
                        codes.append(code)
            
            logger.info(f"  –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤ –¥–ª—è {subject}: {len(codes)}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–¥—ã
            if codes:
                results.append({
                    "subject": subject,
                    "date": parsed_date,
                    "date_str": date_str,
                    "class_number": class_number,
                    "codes": codes
                })
        
        logger.info(f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –∫–æ–¥–∞–º–∏: {len(results)}")
        return results
    
    def _is_valid_code(self, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–¥–æ–º"""
        # –ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª—ç—à–∏ –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å sb
        return (
            code.lower().startswith('sb') and
            '/' in code and
            len(code) > 15
        )

    def _parse_date(self, date_str: str) -> Optional[datetime]:
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        - 23.10.2024
        - 23.10.24
        - 23/10/2024
        - 2024-10-23
        - 30 —Å–µ–Ω—Ç—è–±—Ä—è (–¥–µ–Ω—å –º–µ—Å—è—Ü)
        """
        if not date_str:
            return None

        # –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
        months_ru = {
            '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4,
            '–º–∞—è': 5, '–∏—é–Ω—è': 6, '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8,
            '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
        }

        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç "30 —Å–µ–Ω—Ç—è–±—Ä—è"
        date_str_lower = date_str.lower().strip()
        for month_name, month_num in months_ru.items():
            if month_name in date_str_lower:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
                match = re.search(r'(\d{1,2})', date_str_lower)
                if match:
                    day = int(match.group(1))
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                    year = datetime.now().year
                    try:
                        return datetime(year, month_num, day)
                    except ValueError:
                        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞: {date_str}")
                        return None

        # –§–æ—Ä–º–∞—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        formats = [
            "%d.%m.%Y",  # 23.10.2024
            "%d.%m.%y",  # 23.10.24
            "%d/%m/%Y",  # 23/10/2024
            "%d/%m/%y",  # 23/10/24
            "%Y-%m-%d",  # 2024-10-23
        ]

        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue

        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {date_str}")
        return None


def parse_codes_csv(file_path: str, encoding: str = 'utf-8') -> List[Dict]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–∞–º–∏
    
    Args:
        file_path: –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        encoding: –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞
        
    Returns:
        List[Dict] —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
    """
    parser = CodesCSVParser(file_path, encoding)
    return parser.parse()


if __name__ == "__main__":
    import sys
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python csv_parser.py <—Ñ–∞–π–ª.csv>")
        sys.exit(1)
    
    results = parse_codes_csv(sys.argv[1])
    
    if not results:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ñ–∞–π–ª –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        sys.exit(1)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:")
    print(f"  –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {len(results)}")
    
    for subject_data in results:
        print(f"\n  üìö {subject_data['subject']}")
        print(f"     –ö–ª–∞—Å—Å: {subject_data['class_number']}")
        print(f"     –î–∞—Ç–∞: {subject_data['date']}")
        print(f"     –ö–æ–¥–æ–≤: {len(subject_data['codes'])}")
        
        if subject_data['codes']:
            print(f"     –ü—Ä–∏–º–µ—Ä—ã:")
            for code in subject_data['codes'][:3]:
                print(f"       - {code}")
            
            if len(subject_data['codes']) > 3:
                print(f"       ... –∏ –µ—â–µ {len(subject_data['codes']) - 3}")