"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
"""
from aiogram import Bot
from loguru import logger
import os


async def notify_admins(bot: Bot, message: str, parse_mode: str = "HTML"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
    """
    admin_ids = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []

    if not admin_ids:
        logger.warning("No admin IDs configured for notifications")
        return

    for admin_id in admin_ids:
        try:
            await bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode=parse_mode
            )
        except Exception as e:
            logger.error(f"Failed to send notification to admin {admin_id}: {e}")


async def notify_new_registration(bot: Bot, student_name: str, telegram_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–µ–Ω–∏–∫–∞"""
    message = (
        "üÜï <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"Telegram ID: {telegram_id}"
    )
    await notify_admins(bot, message)


async def notify_code_request(bot: Bot, student_name: str, grade: int, subject: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞"""
    message = (
        "üîë <b>–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–ö–ª–∞—Å—Å: {grade}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    await notify_admins(bot, message)


async def notify_screenshot_submitted(bot: Bot, student_name: str, subject: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    message = (
        "üì∏ <b>–ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    await notify_admins(bot, message)


async def notify_olympiad_uploaded(bot: Bot, subject: str, class_number: int, codes_count: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    message = (
        "üì§ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–æ–≤–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"–ö–ª–∞—Å—Å: {class_number or '–†–∞–∑–Ω—ã–µ'}\n"
        f"–ö–æ–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {codes_count}"
    )
    await notify_admins(bot, message)


async def notify_low_codes(bot: Bot, subject: str, remaining_codes: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞–ª–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∫–æ–¥–æ–≤"""
    message = (
        "‚ö†Ô∏è <b>–ú–∞–ª–æ –∫–æ–¥–æ–≤!</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–¥–æ–≤: {remaining_codes}\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–¥—ã."
    )
    await notify_admins(bot, message)


async def notify_system_event(bot: Bot, event: str, details: str = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏"""
    message = f"‚ÑπÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ</b>\n\n{event}"

    if details:
        message += f"\n\n{details}"

    await notify_admins(bot, message)
