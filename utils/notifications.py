"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""

from aiogram import Bot
import os
import logging
from dotenv import load_dotenv
from typing import List, Dict

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")


async def notify_admin_new_session(bot: Bot, subject: str, grade8_count: int, grade9_count: int):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã
    """
    if not ADMIN_TELEGRAM_ID:
        return
    
    message = (
        f"üìö <b>–ù–æ–≤–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"–ö–æ–¥–æ–≤ 8 –∫–ª–∞—Å—Å–∞: {grade8_count}\n"
        f"–ö–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞: {grade9_count}\n\n"
        f"–û–ª–∏–º–ø–∏–∞–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —É—á–µ–Ω–∏–∫–∞–º."
    )
    
    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def notify_admin_code_requested(bot: Bot, student_name: str, grade: int, subject: str):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–æ–º
    """
    if not ADMIN_TELEGRAM_ID:
        return
    
    message = (
        f"üîë <b>–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–ö–ª–∞—Å—Å: {grade}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    
    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def notify_admin_screenshot_received(bot: Bot, student_name: str, subject: str):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    """
    if not ADMIN_TELEGRAM_ID:
        return
    
    message = (
        f"‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )
    
    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def notify_admin_daily_summary(
    bot: Bot,
    subject: str,
    total_students: int,
    requested_code: int,
    submitted_screenshots: int,
    missing_screenshots: int
):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    if not ADMIN_TELEGRAM_ID:
        return
    
    percentage = (submitted_screenshots / requested_code * 100) if requested_code > 0 else 0
    
    message = (
        f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {total_students}\n"
        f"üîë –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–¥: {requested_code}\n"
        f"‚úÖ –ü—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç: {submitted_screenshots}\n"
        f"‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏: {missing_screenshots}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {percentage:.1f}%\n\n"
    )
    
    if missing_screenshots > 0:
        message += f"‚ö†Ô∏è <b>{missing_screenshots} —É—á–µ–Ω–∏–∫–æ–≤</b> –µ—â–µ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç!"
    else:
        message += "üéâ –í—Å–µ —É—á–µ–Ω–∏–∫–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã!"
    
    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")


async def notify_admin_missing_screenshots(bot: Bot, students: List[Dict]):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—á–µ–Ω–∏–∫–∞—Ö –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    """
    if not ADMIN_TELEGRAM_ID or not students:
        return
    
    message = f"‚ö†Ô∏è <b>–£—á–µ–Ω–∏–∫–∏ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ({len(students)}):</b>\n\n"
    
    for student in students[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        message += f"‚Ä¢ {student['full_name']} (–∫–ª–∞—Å—Å {student['grade']})\n"
    
    if len(students) > 10:
        message += f"\n... –∏ –µ—â–µ {len(students) - 10}"
    
    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")


async def notify_admin_student_registered(bot: Bot, student_name: str):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    """
    if not ADMIN_TELEGRAM_ID:
        return
    
    message = (
        f"üë§ <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –æ–ª–∏–º–ø–∏–∞–¥."
    )
    
    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def notify_admin_error(bot: Bot, error_message: str, context: str = ""):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–∏—Å—Ç–µ–º–µ
    """
    if not ADMIN_TELEGRAM_ID:
        return
    
    message = (
        f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
        f"{context}\n\n"
        f"<code>{error_message}</code>"
    )
    
    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
