"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
"""

from aiogram import Bot
import os
import logging
from dotenv import load_dotenv
from typing import List, Dict, Optional
from sqlalchemy.orm import Session

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")


async def check_notifications_enabled(db: Session, student_id: Optional[int] = None, check_olympiad: bool = False) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ –∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞

    Args:
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        student_id: ID —É—á–µ–Ω–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        check_olympiad: –ü—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö

    Returns:
        True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, False –∏–Ω–∞—á–µ
    """
    from database.models import NotificationSettings, Student

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    global_settings = db.query(NotificationSettings).first()
    if global_settings and not global_settings.notifications_enabled:
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö
    if check_olympiad and global_settings and not global_settings.olympiad_notifications_enabled:
        return False

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —É—á–µ–Ω–∏–∫, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if student_id:
        student = db.query(Student).filter(Student.id == student_id).first()
        if student and not student.notifications_enabled:
            return False

    return True


async def notify_admin_new_session(bot: Bot, subject: str, grade8_count: int, grade9_count: int, db: Session = None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã
    """
    if not ADMIN_TELEGRAM_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db and not await check_notifications_enabled(db):
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ")
        return

    message = (
        f"üìö <b>–ù–æ–≤–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
        f"–ö–æ–¥–æ–≤ 8 –∫–ª–∞—Å—Å–∞: {grade8_count}\n"
        f"–ö–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞: {grade9_count}\n\n"
        f"–û–ª–∏–º–ø–∏–∞–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —É—á–µ–Ω–∏–∫–∞–º."
    )

    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")


async def notify_admin_code_requested(bot: Bot, student_name: str, grade: int, subject: str, db: Session = None, student_id: int = None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–æ–º
    """
    if not ADMIN_TELEGRAM_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db and not await check_notifications_enabled(db, student_id):
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_id}")
        return

    message = (
        f"üîë <b>–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–ö–ª–∞—Å—Å: {grade}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )

    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def notify_admin_screenshot_received(bot: Bot, student_name: str, subject: str, db: Session = None, student_id: int = None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
    """
    if not ADMIN_TELEGRAM_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db and not await check_notifications_enabled(db, student_id):
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_id}")
        return

    message = (
        f"‚úÖ <b>–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}"
    )

    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def notify_admin_daily_summary(
    bot: Bot,
    subject: str,
    total_students: int,
    requested_code: int,
    submitted_screenshots: int,
    missing_screenshots: int,
    db: Session = None
):
    """
    –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    if not ADMIN_TELEGRAM_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db and not await check_notifications_enabled(db):
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ")
        return

    percentage = (submitted_screenshots / requested_code * 100) if requested_code > 0 else 0

    message = (
        f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n\n"
        f"üë• –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {total_students}\n"
        f"üîë –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–¥: {requested_code}\n"
        f"‚úÖ –ü—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç: {submitted_screenshots}\n"
        f"‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏: {missing_screenshots}\n"
        f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {percentage:.1f}%\n\n"
    )

    if missing_screenshots > 0:
        message += f"‚ö†Ô∏è <b>{missing_screenshots} —É—á–µ–Ω–∏–∫–æ–≤</b> –µ—â–µ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç!"
    else:
        message += "üéâ –í—Å–µ —É—á–µ–Ω–∏–∫–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã!"

    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏: {e}")


async def notify_admin_missing_screenshots(bot: Bot, students: List[Dict], db: Session = None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —É—á–µ–Ω–∏–∫–∞—Ö –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
    """
    if not ADMIN_TELEGRAM_ID or not students:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db and not await check_notifications_enabled(db):
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ")
        return

    message = f"‚ö†Ô∏è <b>–£—á–µ–Ω–∏–∫–∏ –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ ({len(students)}):</b>\n\n"

    for student in students[:10]:  # –ú–∞–∫—Å–∏–º—É–º 10 –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        message += f"‚Ä¢ {student['full_name']} (–∫–ª–∞—Å—Å {student['grade']})\n"

    if len(students) > 10:
        message += f"\n... –∏ –µ—â–µ {len(students) - 10}"

    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")


async def notify_admin_student_registered(bot: Bot, student_name: str, db: Session = None, student_id: int = None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
    """
    if not ADMIN_TELEGRAM_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db and not await check_notifications_enabled(db, student_id):
        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_id}")
        return

    message = (
        f"üë§ <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student_name}\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –æ–ª–∏–º–ø–∏–∞–¥."
    )

    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


async def notify_admin_error(bot: Bot, error_message: str, context: str = "", db: Session = None):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–∏—Å—Ç–µ–º–µ
    """
    if not ADMIN_TELEGRAM_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if db and not await check_notifications_enabled(db):
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ")
        return

    message = (
        f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
        f"{context}\n\n"
        f"<code>{error_message}</code>"
    )

    try:
        await bot.send_message(ADMIN_TELEGRAM_ID, message, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


async def notify_students_olympiad_activated(bot: Bot, session_id: int, subject: str, date: str, db: Session):
    """
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        session_id: ID —Å–µ—Å—Å–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã
        subject: –ü—Ä–µ–¥–º–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥—ã
        date: –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    from database.models import Student, OlympiadSession
    from datetime import datetime

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö
    if not await check_notifications_enabled(db, check_olympiad=True):
        logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–∞—Ö –æ—Ç–∫–ª—é—á–µ–Ω—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    students = db.query(Student).filter(
        Student.is_registered == True,
        Student.notifications_enabled == True,
        Student.telegram_id.isnot(None)
    ).all()

    if not students:
        logger.info("–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
        formatted_date = date_obj.strftime('%d.%m.%Y')
    except:
        formatted_date = date

    message = (
        f"üìö <b>–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞!</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: <b>{subject}</b>\n"
        f"–î–∞—Ç–∞: {formatted_date}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è —É—á–∞—Å—Ç–∏—è, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /get_code"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sent_count = 0
    failed_count = 0

    for student in students:
        try:
            await bot.send_message(student.telegram_id, message, parse_mode="HTML")
            sent_count += 1
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É {student.full_name} (ID: {student.telegram_id})")
        except Exception as e:
            failed_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫—É {student.full_name}: {e}")

    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ª–∏–º–ø–∏–∞–¥–µ '{subject}': –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –æ—à–∏–±–æ–∫ {failed_count}")

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
    session = db.query(OlympiadSession).filter(OlympiadSession.id == session_id).first()
    if session:
        session.notification_sent = True
        db.commit()

    return {"sent": sent_count, "failed": failed_count}
