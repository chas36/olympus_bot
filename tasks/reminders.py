from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
import pytz
from database.database import AsyncSessionLocal
from database import crud
from aiogram import Bot
import os
from dotenv import load_dotenv

load_dotenv()

TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "Europe/Moscow"))
REMINDER_END_TIME = os.getenv("REMINDER_END_TIME", "21:30")
REMINDER_INTERVAL_MINUTES = int(os.getenv("REMINDER_INTERVAL_MINUTES", "30"))


async def send_screenshot_reminders(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
    """
    current_time = datetime.now(TIMEZONE)
    end_hour, end_minute = map(int, REMINDER_END_TIME.split(":"))
    end_time = time(end_hour, end_minute)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∑–¥–Ω–µ–µ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if current_time.time() > end_time:
        print(f"‚è∞ –í—Ä–µ–º—è {current_time.time()} –ø–æ–∑–∂–µ {end_time}, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        return
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await crud.get_active_session(session)
        
        if not active_session:
            print("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        requests_without_screenshot = await crud.get_requests_without_screenshot(
            session, active_session.id
        )
        
        if not requests_without_screenshot:
            print("‚úÖ –í—Å–µ —É—á–µ–Ω–∏–∫–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã")
            return
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {len(requests_without_screenshot)} —É—á–µ–Ω–∏–∫–∞–º...")
        
        for request in requests_without_screenshot:
            student = request.student
            
            if not student.telegram_id:
                continue
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                await bot.send_message(
                    chat_id=student.telegram_id,
                    text=(
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                        f"–¢—ã –ø–æ–ª—É—á–∏–ª –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {active_session.subject}, "
                        f"–Ω–æ –µ—â–µ –Ω–µ –ø—Ä–∏—Å–ª–∞–ª —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n\n"
                        f"üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã "
                        f"–≤ —ç—Ç–æ—Ç —á–∞—Ç –¥–æ {REMINDER_END_TIME}.\n\n"
                        f"–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã!"
                    )
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ë–î
                await crud.create_reminder(session, request.id, "screenshot")
                
                print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {student.full_name}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {student.full_name}: {e}")
        
        print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


def setup_reminder_scheduler(bot: Bot) -> AsyncIOScheduler:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    """
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    
    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    end_hour, end_minute = map(int, REMINDER_END_TIME.split(":"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç —Å 9:00 –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 21:30)
    scheduler.add_job(
        send_screenshot_reminders,
        'interval',
        minutes=REMINDER_INTERVAL_MINUTES,
        start_date=datetime.now(TIMEZONE).replace(hour=9, minute=0, second=0),
        end_date=datetime.now(TIMEZONE).replace(hour=end_hour, minute=end_minute, second=0),
        args=[bot],
        id='screenshot_reminders',
        replace_existing=True
    )
    
    print(f"‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
    print(f"   - –ò–Ω—Ç–µ—Ä–≤–∞–ª: –∫–∞–∂–¥—ã–µ {REMINDER_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
    print(f"   - –û–∫–æ–Ω—á–∞–Ω–∏–µ: {REMINDER_END_TIME}")
    print(f"   - –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {TIMEZONE}")
    
    return scheduler


async def send_immediate_reminder_to_student(bot: Bot, telegram_id: str, subject: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—á–µ–Ω–∏–∫—É
    
    Args:
        bot: —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        telegram_id: Telegram ID —É—á–µ–Ω–∏–∫–∞
        subject: –ø—Ä–µ–¥–º–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥—ã
    """
    try:
        await bot.send_message(
            chat_id=telegram_id,
            text=(
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject}!\n\n"
                f"üì∏ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )
        )
        print(f"‚úÖ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {telegram_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
