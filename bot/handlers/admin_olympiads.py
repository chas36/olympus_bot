"""
–•—ç–Ω–¥–ª–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from database.database import get_async_session
from database import crud
from bot.keyboards import (
    get_olympiads_management_menu, get_export_menu,
    get_admin_main_menu, get_olympiad_selection_keyboard, get_confirm_keyboard
)
from utils.admin_logger import AdminActionLogger
from utils.admin_notifications import notify_system_event
from utils.excel_export import ExcelExporter
import os
import csv
import io
from loguru import logger

router = Router()

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


# ==================== –û–õ–ò–ú–ü–ò–ê–î–´ ====================

@router.callback_query(F.data == "admin_olympiads_list")
async def show_olympiads_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with get_async_session() as session:
        sessions = await crud.get_all_sessions(session)

        if not sessions:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥",
                reply_markup=get_olympiads_management_menu()
            )
            return

        text = "üèÜ <b>–°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥:</b>\n\n"

        for s in sessions[:15]:
            status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if s.is_active else "‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            text += f"<b>ID {s.id}:</b> {s.subject} ({status})\n"
            text += f"   –î–∞—Ç–∞: {s.date.strftime('%d.%m.%Y')}\n"
            text += f"   –ö–ª–∞—Å—Å: {s.class_number or '–†–∞–∑–Ω—ã–µ'}\n\n"

        if len(sessions) > 15:
            text += f"... –∏ –µ—â–µ {len(sessions) - 15} –æ–ª–∏–º–ø–∏–∞–¥"

    await callback.message.edit_text(
        text,
        reply_markup=get_olympiads_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_olympiads_activate")
async def activate_olympiad_selection(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with get_async_session() as session:
        sessions = await crud.get_all_sessions(session)

        if not sessions:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥",
                reply_markup=get_olympiads_management_menu()
            )
            return

        olympiads_data = [
            {"id": s.id, "subject": s.subject, "is_active": s.is_active}
            for s in sessions
        ]

    await callback.message.edit_text(
        "‚úÖ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:",
        reply_markup=get_olympiad_selection_keyboard(olympiads_data, "activate"),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("olympiad_activate_"))
async def execute_activate_olympiad(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    olympiad_id = int(callback.data.split("_")[2])

    async with get_async_session() as session:
        olympiad = await crud.activate_session(session, olympiad_id)

        if not olympiad:
            await callback.answer("–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

    AdminActionLogger.log_olympiad_action(
        callback.from_user.id,
        callback.from_user.full_name,
        "activate_olympiad",
        olympiad_id,
        olympiad.subject
    )

    await callback.message.edit_text(
        f"‚úÖ <b>–û–ª–∏–º–ø–∏–∞–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {olympiad.subject}\n"
        f"–î–∞—Ç–∞: {olympiad.date.strftime('%d.%m.%Y')}",
        reply_markup=get_olympiads_management_menu(),
        parse_mode="HTML"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    await notify_system_event(
        callback.bot,
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.full_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –æ–ª–∏–º–ø–∏–∞–¥—É: {olympiad.subject}"
    )


@router.callback_query(F.data == "admin_olympiads_deactivate")
async def deactivate_all_olympiads(callback: CallbackQuery):
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with get_async_session() as session:
        await crud.deactivate_all_sessions(session)

    AdminActionLogger.log_action(
        callback.from_user.id,
        callback.from_user.full_name,
        "deactivate_all_olympiads"
    )

    await callback.message.edit_text(
        "‚úÖ <b>–í—Å–µ –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã</b>",
        reply_markup=get_olympiads_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_olympiads_delete")
async def delete_olympiad_selection(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with get_async_session() as session:
        sessions = await crud.get_all_sessions(session)

        if not sessions:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥",
                reply_markup=get_olympiads_management_menu()
            )
            return

        olympiads_data = [
            {"id": s.id, "subject": s.subject, "is_active": s.is_active}
            for s in sessions
        ]

    await callback.message.edit_text(
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_olympiad_selection_keyboard(olympiads_data, "delete"),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("olympiad_delete_"))
async def confirm_delete_olympiad(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    olympiad_id = int(callback.data.split("_")[2])

    async with get_async_session() as session:
        olympiad = await crud.get_session_by_id(session, olympiad_id)

        if not olympiad:
            await callback.answer("–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {olympiad.subject}\n"
        f"–î–∞—Ç–∞: {olympiad.date.strftime('%d.%m.%Y')}\n"
        f"–ö–ª–∞—Å—Å: {olympiad.class_number or '–†–∞–∑–Ω—ã–µ'}\n\n"
        f"–í–º–µ—Å—Ç–µ —Å –æ–ª–∏–º–ø–∏–∞–¥–æ–π –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–¥—ã!\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_confirm_keyboard(f"delete_olympiad_{olympiad_id}"),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("confirm_delete_olympiad_"))
async def execute_delete_olympiad(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    olympiad_id = int(callback.data.split("_")[3])

    async with get_async_session() as session:
        olympiad = await crud.get_session_by_id(session, olympiad_id)

        if not olympiad:
            await callback.answer("–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        subject = olympiad.subject
        await crud.delete_session_by_id(session, olympiad_id)

    AdminActionLogger.log_olympiad_action(
        callback.from_user.id,
        callback.from_user.full_name,
        "delete_olympiad",
        olympiad_id,
        subject
    )

    await callback.message.edit_text(
        f"‚úÖ <b>–û–ª–∏–º–ø–∏–∞–¥–∞ —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {subject}",
        reply_markup=get_olympiads_management_menu(),
        parse_mode="HTML"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    await notify_system_event(
        callback.bot,
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.full_name} —É–¥–∞–ª–∏–ª –æ–ª–∏–º–ø–∏–∞–¥—É: {subject}"
    )


@router.callback_query(F.data == "admin_olympiads_stats")
async def show_olympiad_stats_selection(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –æ–ª–∏–º–ø–∏–∞–¥—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with get_async_session() as session:
        sessions = await crud.get_all_sessions(session)

        if not sessions:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –æ–ª–∏–º–ø–∏–∞–¥",
                reply_markup=get_olympiads_management_menu()
            )
            return

        olympiads_data = [
            {"id": s.id, "subject": s.subject, "is_active": s.is_active}
            for s in sessions
        ]

    await callback.message.edit_text(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ª–∏–º–ø–∏–∞–¥—É:",
        reply_markup=get_olympiad_selection_keyboard(olympiads_data, "stats"),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("olympiad_stats_"))
async def show_olympiad_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    olympiad_id = int(callback.data.split("_")[2])

    async with get_async_session() as session:
        from sqlalchemy import select, func
        from database.models import Grade8Code, Grade9Code, CodeRequest

        olympiad = await crud.get_session_by_id(session, olympiad_id)

        if not olympiad:
            await callback.answer("–û–ª–∏–º–ø–∏–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥–∞–º 8 –∫–ª–∞—Å—Å–∞
        grade8_total = await session.execute(
            select(func.count(Grade8Code.id)).where(Grade8Code.session_id == olympiad_id)
        )
        grade8_issued = await session.execute(
            select(func.count(Grade8Code.id)).where(
                Grade8Code.session_id == olympiad_id,
                Grade8Code.is_issued == True
            )
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–¥–∞–º 9 –∫–ª–∞—Å—Å–∞
        grade9_total = await session.execute(
            select(func.count(Grade9Code.id)).where(Grade9Code.session_id == olympiad_id)
        )
        grade9_used = await session.execute(
            select(func.count(Grade9Code.id)).where(
                Grade9Code.session_id == olympiad_id,
                Grade9Code.is_used == True
            )
        )

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º
        requests_total = await session.execute(
            select(func.count(CodeRequest.id)).where(CodeRequest.session_id == olympiad_id)
        )
        screenshots = await session.execute(
            select(func.count(CodeRequest.id)).where(
                CodeRequest.session_id == olympiad_id,
                CodeRequest.screenshot_submitted == True
            )
        )

        g8_total = grade8_total.scalar()
        g8_issued = grade8_issued.scalar()
        g9_total = grade9_total.scalar()
        g9_used = grade9_used.scalar()
        req_total = requests_total.scalar()
        scr_count = screenshots.scalar()

    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {olympiad.subject}</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {olympiad.date.strftime('%d.%m.%Y')}\n"
        f"üéì –ö–ª–∞—Å—Å: {olympiad.class_number or '–†–∞–∑–Ω—ã–µ'}\n"
        f"‚≠ê –°—Ç–∞—Ç—É—Å: {'üü¢ –ê–∫—Ç–∏–≤–Ω–∞' if olympiad.is_active else '‚ö™ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
        f"<b>–ö–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞:</b>\n"
        f"  –í—Å–µ–≥–æ: {g8_total}\n"
        f"  –í—ã–¥–∞–Ω–æ: {g8_issued}\n\n"
        f"<b>–ö–æ–¥—ã 9+ –∫–ª–∞—Å—Å–æ–≤:</b>\n"
        f"  –í—Å–µ–≥–æ: {g9_total}\n"
        f"  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {g9_used}\n"
        f"  –û—Å—Ç–∞–ª–æ—Å—å: {g9_total - g9_used}\n\n"
        f"<b>–ó–∞–ø—Ä–æ—Å—ã –∫–æ–¥–æ–≤:</b> {req_total}\n"
        f"<b>–°–∫—Ä–∏–Ω—à–æ—Ç—ã:</b> {scr_count}\n"
    )

    if req_total > 0:
        percentage = int((scr_count / req_total) * 100)
        text += f"<b>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–¥–∞—á–∏:</b> {percentage}%"

    await callback.message.edit_text(
        text,
        reply_markup=get_olympiads_management_menu(),
        parse_mode="HTML"
    )


# ==================== –≠–ö–°–ü–û–†–¢ ====================

@router.callback_query(F.data == "admin_export_students_csv")
async def export_students_csv(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ CSV"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é CSV —Ñ–∞–π–ª...", show_alert=False)

    async with get_async_session() as session:
        students = await crud.get_all_students(session)

        # –°–æ–∑–¥–∞–µ–º CSV –≤ –ø–∞–º—è—Ç–∏
        output = io.StringIO()
        writer = csv.writer(output)

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        writer.writerow([
            "ID", "–§–ò–û", "–ö–ª–∞—Å—Å", "–ü–∞—Ä–∞–ª–ª–µ–ª—å", "–ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", "Telegram ID", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
        ])

        # –î–∞–Ω–Ω—ã–µ
        for s in students:
            writer.writerow([
                s.id,
                s.full_name,
                s.class_number or "",
                s.parallel or "",
                s.registration_code,
                "–î–∞" if s.is_registered else "–ù–µ—Ç",
                s.telegram_id or "-",
                s.created_at.strftime("%Y-%m-%d %H:%M:%S")
            ])

        output.seek(0)
        csv_bytes = output.getvalue().encode('utf-8-sig')  # BOM –¥–ª—è Excel

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file = BufferedInputFile(csv_bytes, filename="students.csv")
    await callback.message.answer_document(file, caption=f"üìÑ –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ ({len(students)} —á–µ–ª.)")

    AdminActionLogger.log_export(
        callback.from_user.id,
        callback.from_user.full_name,
        "students_csv",
        len(students)
    )


@router.callback_query(F.data == "admin_export_students_excel")
async def export_students_excel(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ Excel"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...", show_alert=False)

    try:
        async with get_async_session() as session:
            students = await crud.get_all_students(session)

            students_data = [
                {
                    "id": s.id,
                    "full_name": s.full_name,
                    "class_number": s.class_number,
                    "parallel": s.parallel,
                    "registration_code": s.registration_code,
                    "is_registered": s.is_registered,
                    "telegram_id": s.telegram_id,
                    "created_at": s.created_at.isoformat(),
                    "registered_at": s.registered_at.isoformat() if s.registered_at else None
                }
                for s in students
            ]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel
        excel_file = ExcelExporter.export_students(students_data)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        file = BufferedInputFile(excel_file.read(), filename="students.xlsx")
        await callback.message.answer_document(file, caption=f"üìä –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ ({len(students)} —á–µ–ª.)")

        AdminActionLogger.log_export(
            callback.from_user.id,
            callback.from_user.full_name,
            "students_excel",
            len(students)
        )

    except ImportError:
        await callback.answer(
            "‚ùå –ú–æ–¥—É–ª—å openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSV —ç–∫—Å–ø–æ—Ä—Ç.",
            show_alert=True
        )


@router.callback_query(F.data == "admin_export_olympiads_csv")
async def export_olympiads_csv(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –æ–ª–∏–º–ø–∏–∞–¥ –≤ CSV"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é CSV —Ñ–∞–π–ª...", show_alert=False)

    async with get_async_session() as session:
        sessions = await crud.get_all_sessions(session)

        # –°–æ–∑–¥–∞–µ–º CSV
        output = io.StringIO()
        writer = csv.writer(output)

        writer.writerow(["ID", "–ü—Ä–µ–¥–º–µ—Ç", "–ö–ª–∞—Å—Å", "–î–∞—Ç–∞", "–≠—Ç–∞–ø", "–ê–∫—Ç–∏–≤–Ω–∞", "–§–∞–π–ª"])

        for s in sessions:
            writer.writerow([
                s.id,
                s.subject,
                s.class_number or "–†–∞–∑–Ω—ã–µ",
                s.date.strftime("%d.%m.%Y"),
                s.stage or "-",
                "–î–∞" if s.is_active else "–ù–µ—Ç",
                s.uploaded_file_name or "-"
            ])

        output.seek(0)
        csv_bytes = output.getvalue().encode('utf-8-sig')

    file = BufferedInputFile(csv_bytes, filename="olympiads.csv")
    await callback.message.answer_document(file, caption=f"üìÑ –°–ø–∏—Å–æ–∫ –æ–ª–∏–º–ø–∏–∞–¥ ({len(sessions)} —à—Ç.)")

    AdminActionLogger.log_export(
        callback.from_user.id,
        callback.from_user.full_name,
        "olympiads_csv",
        len(sessions)
    )


@router.callback_query(F.data == "admin_export_stats_excel")
async def export_stats_excel(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é Excel —Ñ–∞–π–ª...", show_alert=False)

    try:
        async with get_async_session() as session:
            all_students = await crud.get_all_students(session)
            registered = [s for s in all_students if s.is_registered]
            all_sessions = await crud.get_all_sessions(session)
            classes = await crud.get_all_classes(session)

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–ª–∞—Å—Å–∞–º
            classes_stats = []
            for class_num in classes:
                class_students = await crud.get_students_by_class(session, class_num)
                class_registered = sum(1 for s in class_students if s.is_registered)
                classes_stats.append({
                    "class_number": class_num,
                    "total": len(class_students),
                    "registered": class_registered
                })

            stats = {
                "general": {
                    "–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤": len(all_students),
                    "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ": len(registered),
                    "–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ": len(all_students) - len(registered),
                    "–í—Å–µ–≥–æ –æ–ª–∏–º–ø–∏–∞–¥": len(all_sessions),
                    "–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥": sum(1 for s in all_sessions if s.is_active)
                },
                "classes": classes_stats
            }

        excel_file = ExcelExporter.export_statistics(stats)

        file = BufferedInputFile(excel_file.read(), filename="statistics.xlsx")
        await callback.message.answer_document(file, caption="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")

        AdminActionLogger.log_export(
            callback.from_user.id,
            callback.from_user.full_name,
            "statistics_excel"
        )

    except ImportError:
        await callback.answer(
            "‚ùå –ú–æ–¥—É–ª—å openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.",
            show_alert=True
        )


# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

@router.callback_query(F.data == "admin_notifications")
async def show_notifications_settings(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    text = (
        "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n\n"
        "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏:\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤\n"
        "‚Ä¢ –ó–∞–ø—Ä–æ—Å–µ –∫–æ–¥–æ–≤\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤\n"
        "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥\n"
        "‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö\n\n"
        "–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º\n"
        "–∏–∑ —Å–ø–∏—Å–∫–∞ ADMIN_IDS –≤ .env —Ñ–∞–π–ª–µ."
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_admin_main_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_help")
async def show_admin_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    text = (
        "üìö <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏</b>\n\n"
        "<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç:</b>\n"
        "‚Ä¢ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "‚Ä¢ –î–µ–π—Å—Ç–≤–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è\n"
        "‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
        "<b>API –¥–æ—Å—Ç—É–ø:</b>\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: /docs\n"
        "‚Ä¢ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ REST API\n\n"
        "<b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        "‚Ä¢ CSV - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
        "‚Ä¢ Excel - —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç–∏–ª—è–º–∏\n\n"
        "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</b>\n"
        "‚Ä¢ docs/ADMIN_PANEL.md\n"
        "‚Ä¢ README.md"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_admin_main_menu(),
        parse_mode="HTML"
    )
