from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import AsyncSessionLocal
from sqlalchemy import select, and_
from datetime import datetime

from database.models import (
    Student, OlympiadSession, OlympiadCode, CodeRequest, DistributionMode
)
from utils.code_distribution import CodeDistributor

router = Router()


class OlympiadStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    selecting_subject = State()  # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤


@router.message(Command("get_code"))
async def cmd_get_code(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        result = await session.execute(
            select(Student).where(Student.telegram_id == telegram_id)
        )
        student = result.scalar_one_or_none()
        
        if not student or not student.is_registered:
            await message.answer(
                "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        result = await session.execute(
            select(OlympiadSession).where(OlympiadSession.is_active == True)
        )
        active_sessions = result.scalars().all()
        
        if not active_sessions:
            await message.answer(
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥!\n\n"
                "–î–æ–∂–¥–∏—Å—å, –∫–æ–≥–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç –∑–∞–¥–∞–Ω–∏—è."
            )
            return
        
        # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        if len(active_sessions) > 1:
            # TODO: –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            await message.answer(
                "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ª–∏–º–ø–∏–∞–¥—ã:\n\n" +
                "\n".join([f"- {s.subject}" for s in active_sessions]) +
                "\n\n–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç:"
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(sessions=[s.id for s in active_sessions])
            await state.set_state(OlympiadStates.selecting_subject)
            return
        
        # –û–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
        olympiad = active_sessions[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ —É—á–µ–Ω–∏–∫ –∫–æ–¥ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        result = await session.execute(
            select(CodeRequest).where(
                and_(
                    CodeRequest.student_id == student.id,
                    CodeRequest.session_id == olympiad.id
                )
            )
        )
        existing_request = result.scalar_one_or_none()
        
        if existing_request:
            # –£–∂–µ –ø–æ–ª—É—á–∞–ª –∫–æ–¥
            code_result = await session.execute(
                select(OlympiadCode).where(OlympiadCode.id == existing_request.code_id)
            )
            code = code_result.scalar_one_or_none()
            
            screenshot_status = "‚úÖ –ü—Ä–∏—Å–ª–∞–Ω" if existing_request.screenshot_submitted else "‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–Ω"
            
            await message.answer(
                f"‚ÑπÔ∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {olympiad.subject}!\n\n"
                f"–ö–ª–∞—Å—Å: {student.class_number}\n"
                f"–ö–æ–¥: `{code.code if code else 'N/A'}`\n"
                f"–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_status}\n\n"
                f"‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã!",
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Å–µ—Å—Å–∏–∏
        if olympiad.distribution_mode == DistributionMode.PRE_DISTRIBUTED:
            # –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∂–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω
            result = await session.execute(
                select(OlympiadCode).where(
                    and_(
                        OlympiadCode.session_id == olympiad.id,
                        OlympiadCode.student_id == student.id,
                        OlympiadCode.class_number == student.class_number
                    )
                )
            )
            code = result.scalar_one_or_none()
            
            if not code:
                await message.answer(
                    "‚ùå –î–ª—è —Ç–µ–±—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥!\n\n"
                    "–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
                )
                return
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π
            code.is_issued = True
            code.issued_at = datetime.utcnow()
            
        else:  # ON_DEMAND —Ä–µ–∂–∏–º
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –∏–∑ –ø—É–ª–∞
            code = await CodeDistributor.get_code_for_student_on_demand(
                session, student.id, olympiad.id
            )
            
            if not code:
                await message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –∫–æ–¥—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã!\n\n"
                    "–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
                )
                return
            
            code.is_issued = True
            code.issued_at = datetime.utcnow()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞
        code_request = CodeRequest(
            student_id=student.id,
            session_id=olympiad.id,
            code_id=code.id
        )
        session.add(code_request)
        
        await session.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        await message.answer(
            f"‚úÖ –¢–≤–æ–π –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {olympiad.subject}:\n\n"
            f"üìã –ö–ª–∞—Å—Å: {student.class_number}\n\n"
            f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ –≤ –±–æ—Ç "
            f"—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã!\n\n"
            f"üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )
        
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∫–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await message.answer(
            f"üîë <code>{code.code}</code>",
            parse_mode="HTML"
        )


@router.message(Command("my_status"))
async def cmd_my_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—á–µ–Ω–∏–∫–∞"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Student).where(Student.telegram_id == telegram_id)
        )
        student = result.scalar_one_or_none()
        
        if not student or not student.is_registered:
            await message.answer(
                "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        result = await session.execute(
            select(OlympiadSession).where(OlympiadSession.is_active == True)
        )
        active_sessions = result.scalars().all()
        
        if not active_sessions:
            await message.answer(
                f"üë§ {student.full_name}\n"
                f"üìö –ö–ª–∞—Å—Å: {student.class_number}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        status_messages = [
            f"üë§ {student.full_name}\n"
            f"üìö –ö–ª–∞—Å—Å: {student.class_number}\n"
            f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n"
        ]
        
        for olympiad in active_sessions:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
            result = await session.execute(
                select(CodeRequest).where(
                    and_(
                        CodeRequest.student_id == student.id,
                        CodeRequest.session_id == olympiad.id
                    )
                )
            )
            code_request = result.scalar_one_or_none()
            
            if not code_request:
                status_messages.append(
                    f"\nüìö {olympiad.subject}:\n"
                    f"‚ùå –ö–æ–¥ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π /get_code"
                )
            else:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥
                result = await session.execute(
                    select(OlympiadCode).where(OlympiadCode.id == code_request.code_id)
                )
                code = result.scalar_one_or_none()
                
                screenshot_status = "‚úÖ –ü—Ä–∏—Å–ª–∞–Ω" if code_request.screenshot_submitted else "‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–Ω"
                
                status_messages.append(
                    f"\nüìö {olympiad.subject}:\n"
                    f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_status}\n"
                    f"üîë –ö–æ–¥: <code>{code.code if code else 'N/A'}</code>"
                )
                
                if not code_request.screenshot_submitted:
                    status_messages.append(
                        "‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç!"
                    )
        
        await message.answer(
            "\n".join(status_messages),
            parse_mode="HTML"
        )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            select(Student).where(Student.telegram_id == telegram_id)
        )
        student = result.scalar_one_or_none()
        
        if not student or not student.is_registered:
            await message.answer(
                "üìñ –°–ø—Ä–∞–≤–∫–∞\n\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            )
        else:
            await message.answer(
                "üìñ –°–ø—Ä–∞–≤–∫–∞\n\n"
                "/get_code - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã\n"
                "/my_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "üì∏ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç."
            )