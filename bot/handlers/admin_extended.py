"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import AsyncSessionLocal
from database import crud
from bot.keyboards import (
    get_students_management_menu, get_classes_management_menu,
    get_olympiads_management_menu, get_export_menu, get_admin_main_menu,
    get_back_button, get_confirm_keyboard, get_class_selection_keyboard,
    get_olympiad_selection_keyboard
)
from utils.admin_logger import AdminActionLogger
from utils.admin_notifications import notify_system_event
from utils.excel_export import ExcelExporter
import os
from loguru import logger

router = Router()

ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS", "").split(","))) if os.getenv("ADMIN_IDS") else []


def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    waiting_for_student_id = State()
    waiting_for_class_number = State()
    waiting_for_olympiad_id = State()


# ==================== –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø ====================

@router.callback_query(F.data == "admin_students_menu")
async def show_students_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_students_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_classes_menu")
async def show_classes_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üéì <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_classes_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_olympiads_menu")
async def show_olympiads_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üèÜ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_olympiads_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_export_menu")
async def show_export_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üì• <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=get_export_menu(),
        parse_mode="HTML"
    )


# ==================== –£–ß–ï–ù–ò–ö–ò ====================

@router.callback_query(F.data == "admin_students_list")
async def show_all_students(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        students = await crud.get_all_students(session)

        if not students:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤",
                reply_markup=get_students_management_menu()
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        text = f"üë• <b>–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}</b>\n\n"

        for student in students[:20]:
            status = "‚úÖ" if student.is_registered else "‚ùå"
            class_info = f"{student.class_number}{student.parallel or ''}" if student.class_number else "–ù–µ —É–∫–∞–∑–∞–Ω"
            text += f"{status} <b>{student.full_name}</b> ({class_info} –∫–ª.)\n"
            text += f"   ID: {student.id} | –ö–æ–¥: {student.registration_code}\n\n"

        if len(students) > 20:
            text += f"\n... –∏ –µ—â–µ {len(students) - 20} —É—á–µ–Ω–∏–∫–æ–≤"

    AdminActionLogger.log_action(
        callback.from_user.id,
        callback.from_user.full_name,
        "view_students_list",
        {"total": len(students)}
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_students_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_students_registered")
async def show_registered_students(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        students = await crud.get_registered_students(session)

        if not students:
            await callback.message.edit_text(
                "üìù –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤",
                reply_markup=get_students_management_menu()
            )
            return

        text = f"‚úÖ <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(students)}</b>\n\n"

        for student in students[:20]:
            class_info = f"{student.class_number}{student.parallel or ''}" if student.class_number else "–ù–µ —É–∫–∞–∑–∞–Ω"
            text += f"<b>{student.full_name}</b> ({class_info} –∫–ª.)\n"
            text += f"   TG ID: {student.telegram_id}\n\n"

        if len(students) > 20:
            text += f"\n... –∏ –µ—â–µ {len(students) - 20} —É—á–µ–Ω–∏–∫–æ–≤"

    await callback.message.edit_text(
        text,
        reply_markup=get_students_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_students_unregistered")
async def show_unregistered_students(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        students = await crud.get_unregistered_students(session)

        if not students:
            await callback.message.edit_text(
                "üìù –í—Å–µ —É—á–µ–Ω–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                reply_markup=get_students_management_menu()
            )
            return

        text = f"‚ùå <b>–ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(students)}</b>\n\n"

        for student in students[:20]:
            class_info = f"{student.class_number}{student.parallel or ''}" if student.class_number else "–ù–µ —É–∫–∞–∑–∞–Ω"
            text += f"<b>{student.full_name}</b> ({class_info} –∫–ª.)\n"
            text += f"   –ö–æ–¥: <code>{student.registration_code}</code>\n\n"

        if len(students) > 20:
            text += f"\n... –∏ –µ—â–µ {len(students) - 20} —É—á–µ–Ω–∏–∫–æ–≤"

    await callback.message.edit_text(
        text,
        reply_markup=get_students_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_students_search")
async def search_student_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ –µ–≥–æ –§–ò–û:",
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )

    await state.set_state(AdminStates.waiting_for_student_id)


@router.callback_query(F.data == "admin_students_delete")
async def delete_student_prompt(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å ID —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
        "(–£–∑–Ω–∞—Ç—å ID –º–æ–∂–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —É—á–µ–Ω–∏–∫–æ–≤)",
        reply_markup=get_back_button(),
        parse_mode="HTML"
    )

    await state.set_state(AdminStates.waiting_for_student_id)


@router.callback_query(F.data == "admin_students_clear_all")
async def confirm_clear_all_students(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±–µ–∑ –∏—Ö –∑–∞–≥—Ä—É–∑–∫–∏
        count = await crud.count_all_students(session)

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï–• —É—á–µ–Ω–∏–∫–æ–≤ ({count} —á–µ–ª.)\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_confirm_keyboard("clear_all_students"),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_clear_all_students")
async def execute_clear_all_students(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        count = await crud.clear_all_students(session)

    AdminActionLogger.log_action(
        callback.from_user.id,
        callback.from_user.full_name,
        "clear_all_students",
        {"deleted_count": count}
    )

    await callback.message.edit_text(
        f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n"
        f"–£–¥–∞–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {count}",
        reply_markup=get_admin_main_menu(),
        parse_mode="HTML"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤
    from aiogram import Bot
    bot = callback.bot
    await notify_system_event(
        bot,
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {callback.from_user.full_name} —É–¥–∞–ª–∏–ª –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ ({count} —á–µ–ª.)"
    )


# ==================== –ö–õ–ê–°–°–´ ====================

@router.callback_query(F.data == "admin_classes_list")
async def show_classes_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –≤–º–µ—Å—Ç–æ N+1
        stats = await crud.get_classes_statistics(session)

        if not stats:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤",
                reply_markup=get_classes_management_menu()
            )
            return

        text = "üéì <b>–°–ø–∏—Å–æ–∫ –∫–ª–∞—Å—Å–æ–≤:</b>\n\n"

        for class_num, data in stats.items():
            text += f"<b>{class_num} –∫–ª–∞—Å—Å:</b> {data['total']} —É—á. ({data['registered']} –∑–∞—Ä–µ–≥.)\n"

    await callback.message.edit_text(
        text,
        reply_markup=get_classes_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_classes_students")
async def show_class_students_selection(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–µ–Ω–∏–∫–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        classes = await crud.get_all_classes(session)

        if not classes:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤",
                reply_markup=get_classes_management_menu()
            )
            return

    await callback.message.edit_text(
        "üë• <b>–£—á–µ–Ω–∏–∫–∏ –ø–æ –∫–ª–∞—Å—Å–∞–º</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
        reply_markup=get_class_selection_keyboard(classes),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("select_class_"))
async def show_class_students(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    class_number = int(callback.data.split("_")[2])

    async with AsyncSessionLocal() as session:
        students = await crud.get_students_by_class(session, class_number)

        if not students:
            await callback.answer(f"–í {class_number} –∫–ª–∞—Å—Å–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤", show_alert=True)
            return

        text = f"üë• <b>{class_number} –∫–ª–∞—Å—Å ({len(students)} —É—á.)</b>\n\n"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 30 —É—á–µ–Ω–∏–∫–æ–≤
        for student in students[:30]:
            status = "‚úÖ" if student.is_registered else "‚ùå"
            text += f"{status} <b>{student.full_name}</b>\n"

            if student.is_registered:
                text += f"   TG ID: {student.telegram_id}\n"
            else:
                text += f"   –ö–æ–¥: <code>{student.registration_code}</code>\n"

            text += "\n"

        if len(students) > 30:
            text += f"\n... –∏ –µ—â–µ {len(students) - 30} —É—á–µ–Ω–∏–∫–æ–≤"

    await callback.message.edit_text(
        text,
        reply_markup=get_classes_management_menu(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_classes_delete")
async def delete_class_selection(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    async with AsyncSessionLocal() as session:
        classes = await crud.get_all_classes(session)

        if not classes:
            await callback.message.edit_text(
                "üìù –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤",
                reply_markup=get_classes_management_menu()
            )
            return

    await callback.message.edit_text(
        "üóë <b>–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_class_selection_keyboard(classes),
        parse_mode="HTML"
    )


# –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∞–π–ª–µ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞...
