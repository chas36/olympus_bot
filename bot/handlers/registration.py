from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import AsyncSessionLocal
from database import crud
from utils.auth import validate_code_format

router = Router()


class RegistrationStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    waiting_for_code = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        if student and student.is_registered:
            await message.answer(
                f"üëã –ü—Ä–∏–≤–µ—Ç, {student.full_name}!\n\n"
                "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/get_code - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã\n"
                "/my_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
                "/help - –ü–æ–º–æ—â—å"
            )
        else:
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –æ–ª–∏–º–ø–∏–∞–¥—ã!\n\n"
                "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n\n"
                "–§–æ—Ä–º–∞—Ç –∫–æ–¥–∞: XXXX-XXXX-XXXX"
            )
            await state.set_state(RegistrationStates.waiting_for_code)


@router.message(RegistrationStates.waiting_for_code)
async def process_registration_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞"""
    code = message.text.strip().upper()
    telegram_id = str(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞
    if not validate_code_format(code):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞!\n\n"
            "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: XXXX-XXXX-XXXX\n"
            "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
        )
        return
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É—á–µ–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º
        student = await crud.get_student_by_registration_code(session, code)
        
        if not student:
            await message.answer(
                "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —É—á–µ–Ω–∏–∫
        if student.is_registered:
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n"
                "–ï—Å–ª–∏ —ç—Ç–æ —Ç–≤–æ–π –∫–æ–¥, –Ω–æ —Ç—ã –ø–æ—Ç–µ—Ä—è–ª –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, "
                "–æ–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —ç—Ç–æ—Ç telegram_id –ø–æ–¥ –¥—Ä—É–≥–∏–º –∫–æ–¥–æ–º
        existing_student = await crud.get_student_by_telegram_id(session, telegram_id)
        if existing_student:
            await message.answer(
                f"‚ùå –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {existing_student.full_name}!\n\n"
                "–û–¥–∏–Ω Telegram –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–æ–¥."
            )
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–µ–Ω–∏–∫–∞
        await crud.register_student(session, student.id, telegram_id)
        
        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {student.full_name}!\n\n"
            f"–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∫–æ–¥—ã –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/get_code - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã\n"
            f"/my_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
            f"/help - –ü–æ–º–æ—â—å"
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()


@router.message(F.text == "/cancel")
async def cmd_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    current_state = await state.get_state()
    
    if current_state is None:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
        return
    
    await state.clear()
    await message.answer(
        "‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ù–∞–ø–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )
