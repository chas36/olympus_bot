from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import AsyncSessionLocal
from database import crud
from bot.keyboards import get_grade_selection_keyboard

router = Router()


class OlympiadStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    selecting_grade = State()


@router.message(Command("get_code"))
async def cmd_get_code(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        if not student or not student.is_registered:
            await message.answer(
                "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        active_session = await crud.get_active_session(session)
        
        if not active_session:
            await message.answer(
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã!\n\n"
                "–î–æ–∂–¥–∏—Å—å, –∫–æ–≥–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç –∑–∞–¥–∞–Ω–∏—è."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ —É—á–µ–Ω–∏–∫ –∫–æ–¥ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        existing_request = await crud.get_code_request_for_student_in_session(
            session, student.id, active_session.id
        )
        
        if existing_request:
            screenshot_status = "‚úÖ –ü—Ä–∏—Å–ª–∞–Ω" if existing_request.screenshot_submitted else "‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–Ω"
            await message.answer(
                f"‚ÑπÔ∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {active_session.subject}!\n\n"
                f"–ö–ª–∞—Å—Å: {existing_request.grade}\n"
                f"–ö–æ–¥: `{existing_request.code}`\n"
                f"–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_status}\n\n"
                f"‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã!",
                parse_mode="Markdown"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(session_id=active_session.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞
        available_grade9 = await crud.count_available_grade9_codes(session, active_session.id)
        
        await message.answer(
            f"üìö {active_session.subject}\n\n"
            f"–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—à—å –ø–∏—Å–∞—Ç—å:",
            reply_markup=get_grade_selection_keyboard(available_grade9 > 0)
        )
        
        await state.set_state(OlympiadStates.selecting_grade)


@router.callback_query(OlympiadStates.selecting_grade, F.data.in_(["grade_8", "grade_9"]))
async def process_grade_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
    telegram_id = str(callback.from_user.id)
    selected_grade = 8 if callback.data == "grade_8" else 9
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        session_id = data.get("session_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        olympiad_session = await crud.get_session_by_id(session, session_id)
        
        if not olympiad_session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        if selected_grade == 8:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–Ω–æ–π –∫–æ–¥ 8 –∫–ª–∞—Å—Å–∞
            grade8_code = await crud.get_grade8_code_for_student(
                session, student.id, session_id
            )
            
            if not grade8_code:
                await callback.message.answer(
                    "‚ùå –î–ª—è —Ç–µ–±—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ 8 –∫–ª–∞—Å—Å–∞!\n\n"
                    "–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
                )
                await callback.answer()
                await state.clear()
                return
            
            code = grade8_code.code
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π
            await crud.mark_grade8_code_issued(session, grade8_code.id)
            
        else:  # grade 9
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –∫–æ–¥ 9 –∫–ª–∞—Å—Å–∞
            grade9_code = await crud.get_available_grade9_code(session, session_id)
            
            if not grade9_code:
                await callback.message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –∫–æ–¥—ã –¥–ª—è 9 –∫–ª–∞—Å—Å–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã!\n\n"
                    "–¢—ã –º–æ–∂–µ—à—å –≤–∑—è—Ç—å –∫–æ–¥ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞."
                )
                await callback.answer()
                return
            
            code = grade9_code.code
            
            # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–æ–¥ —É—á–µ–Ω–∏–∫—É
            await crud.assign_grade9_code(session, grade9_code.id, student.id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞
        code_request = await crud.create_code_request(
            session, student.id, session_id, selected_grade, code
        )
        
        await callback.message.answer(
            f"‚úÖ –¢–≤–æ–π –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {olympiad_session.subject}:\n\n"
            f"üìã –ö–ª–∞—Å—Å: {selected_grade}\n"
            f"üîë –ö–æ–¥: `{code}`\n\n"
            f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ –≤ –±–æ—Ç "
            f"—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã!\n\n"
            f"üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
            parse_mode="Markdown"
        )
        
        await callback.answer("‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω!")
        await state.clear()


@router.message(Command("my_status"))
async def cmd_my_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—á–µ–Ω–∏–∫–∞"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        if not student or not student.is_registered:
            await message.answer(
                "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await crud.get_active_session(session)
        
        if not active_session:
            await message.answer(
                f"üë§ {student.full_name}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        code_request = await crud.get_code_request_for_student_in_session(
            session, student.id, active_session.id
        )
        
        if not code_request:
            await message.answer(
                f"üë§ {student.full_name}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                f"üìö –¢–µ–∫—É—â–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞: {active_session.subject}\n"
                f"‚ùå –ö–æ–¥ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π /get_code –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞."
            )
        else:
            screenshot_status = "‚úÖ –ü—Ä–∏—Å–ª–∞–Ω" if code_request.screenshot_submitted else "‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–Ω"
            
            await message.answer(
                f"üë§ {student.full_name}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                f"üìö –û–ª–∏–º–ø–∏–∞–¥–∞: {active_session.subject}\n"
                f"üìã –ö–ª–∞—Å—Å: {code_request.grade}\n"
                f"üîë –ö–æ–¥: `{code_request.code}`\n"
                f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_status}\n\n"
                f"{'‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã!' if not code_request.screenshot_submitted else ''}",
                parse_mode="Markdown"
            )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        if not student or not student.is_registered:
            await message.answer(
                "üìñ –°–ø—Ä–∞–≤–∫–∞\n\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            )
        else:
            await message.answer(
                "üìñ –°–ø—Ä–∞–≤–∫–∞\n\n"
                "/get_code - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã\n"
                "/my_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "üì∏ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç."
            )
