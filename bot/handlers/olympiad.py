from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.database import AsyncSessionLocal
from database import crud
from bot.keyboards import get_grade_selection_keyboard

router = Router()


class OlympiadStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    selecting_grade = State()


@router.message(Command("get_code"))
async def cmd_get_code(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞ –æ–ª–∏–º–ø–∏–∞–¥—ã"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        if not student or not student.is_registered:
            await message.answer(
                "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        active_session = await crud.get_active_session(session)
        
        if not active_session:
            await message.answer(
                "‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ª–∏–º–ø–∏–∞–¥—ã!\n\n"
                "–î–æ–∂–¥–∏—Å—å, –∫–æ–≥–¥–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç –∑–∞–¥–∞–Ω–∏—è."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∞–ª –ª–∏ —É–∂–µ —É—á–µ–Ω–∏–∫ –∫–æ–¥ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
        existing_request = await crud.get_code_request_for_student_in_session(
            session, student.id, active_session.id
        )

        if existing_request:
            screenshot_status = "‚úÖ –ü—Ä–∏—Å–ª–∞–Ω" if existing_request.screenshot_submitted else "‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–Ω"
            await message.answer(
                f"‚ÑπÔ∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {active_session.subject}!\n\n"
                f"–ö–ª–∞—Å—Å: {existing_request.grade}\n"
                f"–ö–æ–¥: `{existing_request.code}`\n"
                f"–°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_status}\n\n"
                f"‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã!",
                parse_mode="Markdown"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞
        if not student.class_number:
            await message.answer(
                "‚ùå –¢–≤–æ–π –∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!\n\n"
                "–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
            )
            return

        # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª–∞—Å—Å (–∫–∞—Å–∫–∞–¥–Ω—ã–π –ø–æ–∏—Å–∫)
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –∫–ª–∞—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞ –∏ –∏—â–µ–º –≤–≤–µ—Ä—Ö –¥–æ 11 –∫–ª–∞—Å—Å–∞
        available_class = await crud.find_nearest_available_class(
            session, active_session.id, student.class_number
        )

        if not available_class:
            await message.answer(
                f"‚ùå –û–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {active_session.subject} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                f"–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–¥–æ–≤ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."
            )
            return

        # –¢–æ–ª—å–∫–æ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ–∂–¥—É 8 –∏ 9 –∫–ª–∞—Å—Å–æ–º (–µ—Å–ª–∏ –æ–±–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        if student.class_number == 8 and available_class == 8:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–µ—Å—Å–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(session_id=active_session.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞ –¥–ª—è 8-–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤
            class_parallel = f"8{student.parallel or ''}"
            available_reserve = await crud.count_available_reserve_codes_for_grade8(
                session, active_session.id, class_parallel
            )

            await message.answer(
                f"üìö {active_session.subject}\n\n"
                f"–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—à—å –ø–∏—Å–∞—Ç—å:",
                reply_markup=get_grade_selection_keyboard(available_reserve > 0)
            )

            await state.set_state(OlympiadStates.selecting_grade)
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –≤—ã–¥–∞–µ–º –∫–æ–¥ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
            # available_class —É–∂–µ –Ω–∞–π–¥–µ–Ω –≤—ã—à–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–µ–Ω –∏–ª–∏ —Å—Ç–∞—Ä—à–µ –∫–ª–∞—Å—Å–∞ —É—á–µ–Ω–∏–∫–∞)

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –∫–æ–¥ (–í–∞—Ä–∏–∞–Ω—Ç 1)
            olympiad_code = await crud.get_assigned_code_for_student(
                session, student.id, active_session.id, available_class
            )

            # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ - –±–µ—Ä–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π (–í–∞—Ä–∏–∞–Ω—Ç 2)
            if not olympiad_code:
                olympiad_code = await crud.get_available_code_for_class(
                    session, active_session.id, available_class
                )

            if not olympiad_code:
                await message.answer(
                    f"‚ùå –î–ª—è —Ç–µ–±—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥!\n\n"
                    f"–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
                )
                return

            code = olympiad_code.code

            # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π
            await crud.mark_code_issued(session, olympiad_code.id, student.id)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞
            await crud.create_code_request(
                session, student.id, active_session.id, available_class, code
            )

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —Å–≤–æ–π –∫–ª–∞—Å—Å –∏–ª–∏ —Å—Ç–∞—Ä—à–∏–π
            if available_class == student.class_number:
                # –ö–æ–¥ –¥–ª—è —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞
                class_info = f"üìã –ö–ª–∞—Å—Å: {available_class}"
            else:
                # –ö–æ–¥ –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ –∫–ª–∞—Å—Å–∞
                class_info = f"üìã –ö–ª–∞—Å—Å: {available_class} (–¥–ª—è —Ç–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞ –∫–æ–¥–æ–≤ –Ω–µ—Ç, –≤—ã–¥–∞–Ω –∫–æ–¥ —Å—Ç–∞—Ä—à–µ–≥–æ –∫–ª–∞—Å—Å–∞)"

            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            await message.answer(
                f"‚úÖ –¢–≤–æ–π –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {active_session.subject}:\n\n"
                f"{class_info}\n\n"
                f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ –≤ –±–æ—Ç "
                f"—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã!\n\n"
                f"üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
            )

            # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∫–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            await message.answer(
                f"üîë <code>{code}</code>",
                parse_mode="HTML"
            )


@router.callback_query(OlympiadStates.selecting_grade, F.data.in_(["grade_8", "grade_9"]))
async def process_grade_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
    telegram_id = str(callback.from_user.id)
    selected_grade = 8 if callback.data == "grade_8" else 9
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        session_id = data.get("session_id")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        olympiad_session = await crud.get_session_by_id(session, session_id)
        
        if not olympiad_session:
            await callback.answer("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
        if selected_grade == 8:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π (–í–∞—Ä–∏–∞–Ω—Ç 1)
            olympiad_code = await crud.get_assigned_code_for_student(
                session, student.id, session_id, 8
            )

            # –ï—Å–ª–∏ –Ω–µ—Ç - –±–µ—Ä–µ–º –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π (–í–∞—Ä–∏–∞–Ω—Ç 2)
            if not olympiad_code:
                olympiad_code = await crud.get_available_code_for_class(
                    session, session_id, 8
                )

            if not olympiad_code:
                await callback.message.answer(
                    "‚ùå –î–ª—è —Ç–µ–±—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–¥ 8 –∫–ª–∞—Å—Å–∞!\n\n"
                    "–û–±—Ä–∞—Ç–∏—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é."
                )
                await callback.answer()
                await state.clear()
                return

            code = olympiad_code.code

            # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –≤—ã–¥–∞–Ω–Ω—ã–π
            await crud.mark_code_issued(session, olympiad_code.id, student.id)

        else:  # grade 9 - —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã –∏–∑ –ø—É–ª–∞ 9 –∫–ª–∞—Å—Å–∞
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª–∏ —É—á–µ–Ω–∏–∫–∞
            class_parallel = f"8{student.parallel or ''}"
            reserve_code = await crud.get_available_reserve_code_for_grade8(
                session, session_id, class_parallel
            )

            if not reserve_code:
                await callback.message.answer(
                    "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è 9 –∫–ª–∞—Å—Å–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã!\n\n"
                    "–¢—ã –º–æ–∂–µ—à—å –≤–∑—è—Ç—å –∫–æ–¥ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞."
                )
                await callback.answer()
                return

            code = reserve_code.code

            # –ü–æ–º–µ—á–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            await crud.mark_reserve_code_used(session, reserve_code.id, student.id)
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–¥–∞
        code_request = await crud.create_code_request(
            session, student.id, session_id, selected_grade, code
        )
        
        # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        await callback.message.answer(
            f"‚úÖ –¢–≤–æ–π –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {olympiad_session.subject}:\n\n"
            f"üìã –ö–ª–∞—Å—Å: {selected_grade}\n\n"
            f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—à–ª–∏ –≤ –±–æ—Ç "
            f"—Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã!\n\n"
            f"üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç."
        )
        
        # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –∫–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            f"üîë <code>{code}</code>",
            parse_mode="HTML"
        )
        
        await callback.answer("‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω!")
        await state.clear()


@router.message(Command("my_status"))
async def cmd_my_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —É—á–µ–Ω–∏–∫–∞"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        if not student or not student.is_registered:
            await message.answer(
                "‚ùå –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = await crud.get_active_session(session)
        
        if not active_session:
            await message.answer(
                f"üë§ {student.full_name}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                f"–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ª–∏–º–ø–∏–∞–¥."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
        code_request = await crud.get_code_request_for_student_in_session(
            session, student.id, active_session.id
        )
        
        if not code_request:
            await message.answer(
                f"üë§ {student.full_name}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                f"üìö –¢–µ–∫—É—â–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞: {active_session.subject}\n"
                f"‚ùå –ö–æ–¥ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π /get_code –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞."
            )
        else:
            screenshot_status = "‚úÖ –ü—Ä–∏—Å–ª–∞–Ω" if code_request.screenshot_submitted else "‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–Ω"
            
            await message.answer(
                f"üë§ {student.full_name}\n"
                f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\n\n"
                f"üìö –û–ª–∏–º–ø–∏–∞–¥–∞: {active_session.subject}\n"
                f"üìã –ö–ª–∞—Å—Å: {code_request.grade}\n"
                f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_status}\n\n"
                f"{'‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏—Å–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã!' if not code_request.screenshot_submitted else ''}\n"
                f"üîë –¢–≤–æ–π –∫–æ–¥:\n\n"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(
                f"<code>{code_request.code}</code>",
                parse_mode="HTML"
            )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    telegram_id = str(message.from_user.id)
    
    async with AsyncSessionLocal() as session:
        student = await crud.get_student_by_telegram_id(session, telegram_id)
        
        if not student or not student.is_registered:
            await message.answer(
                "üìñ –°–ø—Ä–∞–≤–∫–∞\n\n"
                "/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            )
        else:
            await message.answer(
                "üìñ –°–ø—Ä–∞–≤–∫–∞\n\n"
                "/get_code - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–ª–∏–º–ø–∏–∞–¥—ã\n"
                "/my_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
                "üì∏ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –≤ —á–∞—Ç."
            )