"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞
"""

from aiogram import Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
import logging
import os
import requests

from database.database import SessionLocal
from database.models import User, AuthToken, moscow_now

logger = logging.getLogger(__name__)

router = Router()

ADMIN_TELEGRAM_ID = os.getenv("ADMIN_TELEGRAM_ID")
API_URL = os.getenv("API_URL", "http://localhost:8001")


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class AddUserForm(StatesGroup):
    waiting_for_telegram_id = State()
    waiting_for_role = State()


def get_db():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ë–î"""
    return SessionLocal()


def is_admin(telegram_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return str(telegram_id) == str(ADMIN_TELEGRAM_ID)


@router.message(CommandStart(deep_link=True))
async def handle_auth_deeplink(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ deep link –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: /start auth_<token>
    """
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        return

    deep_link_arg = args[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–æ–∫–µ–Ω–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if not deep_link_arg.startswith("auth_"):
        return

    token = deep_link_arg[5:]  # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "auth_"

    db = get_db()
    try:
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –≤ –ë–î
        auth_token = db.query(AuthToken).filter(
            AuthToken.token == token,
            AuthToken.is_used == False,
            AuthToken.expires_at > moscow_now()
        ).first()

        if not auth_token:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.id == auth_token.user_id).first()

        if not user or not user.is_active:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user.telegram_id != str(message.from_user.id):
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                parse_mode="HTML"
            )
            return

        # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ API
        try:
            response = requests.post(
                f"{API_URL}/api/auth/verify",
                json={"token": token},
                timeout=10
            )

            if response.status_code == 200:
                await message.answer(
                    "‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –ø–∞–Ω–µ–ª—å—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
                    f"–í–∞—à–∞ —Ä–æ–ª—å: <b>{user.role}</b>",
                    parse_mode="HTML"
                )
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è")
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
                logger.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.status_code} - {response.text}")

        except Exception as e:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

    finally:
        db.close()


# ============================================
# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# ============================================

@router.message(Command("adduser"))
async def cmd_adduser(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    await message.answer(
        "üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ü–∏—Ñ—Ä—ã):",
        parse_mode="HTML"
    )
    await state.set_state(AddUserForm.waiting_for_telegram_id)


@router.message(AddUserForm.waiting_for_telegram_id)
async def process_telegram_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram ID"""
    telegram_id = message.text.strip()

    if not telegram_id.isdigit():
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º telegram_id
    await state.update_data(telegram_id=telegram_id)

    await message.answer(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n\n"
        "1. <code>admin</code> - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
        "2. <code>teacher</code> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ª–∏–º–ø–∏–∞–¥–∞–º–∏\n"
        "3. <code>viewer</code> - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏:",
        parse_mode="HTML"
    )
    await state.set_state(AddUserForm.waiting_for_role)


@router.message(AddUserForm.waiting_for_role)
async def process_role(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role = message.text.strip().lower()

    valid_roles = ["admin", "teacher", "viewer"]
    if role not in valid_roles:
        await message.answer(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏: {', '.join(valid_roles)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
    data = await state.get_data()
    telegram_id = data.get("telegram_id")

    db = get_db()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if existing_user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.\n\n"
                f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <b>{existing_user.role}</b>",
                parse_mode="HTML"
            )
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        new_user = User(
            telegram_id=telegram_id,
            role=role,
            is_active=True
        )
        db.add(new_user)
        db.commit()

        await message.answer(
            "‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"Telegram ID: <code>{telegram_id}</code>\n"
            f"–†–æ–ª—å: <b>{role}</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
            parse_mode="HTML"
        )
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id} (—Ä–æ–ª—å: {role})")

    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}",
            parse_mode="HTML"
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    finally:
        db.close()
        await state.clear()


@router.message(Command("listusers"))
async def cmd_listusers(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    db = get_db()
    try:
        users = db.query(User).all()

        if not users:
            await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        response = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"

        for user in users:
            status = "‚úÖ" if user.is_active else "‚ùå"
            response += (
                f"{status} <b>ID {user.id}</b>\n"
                f"   Telegram ID: <code>{user.telegram_id}</code>\n"
                f"   –†–æ–ª—å: <b>{user.role}</b>\n"
            )

            if user.username:
                response += f"   Username: @{user.username}\n"
            if user.full_name:
                response += f"   –ò–º—è: {user.full_name}\n"
            if user.last_login:
                response += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {user.last_login.strftime('%d.%m.%Y %H:%M')}\n"

            response += "\n"

        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

    finally:
        db.close()


@router.message(Command("deluser"))
async def cmd_deluser(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    –§–æ—Ä–º–∞—Ç: /deluser <telegram_id>
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /deluser <telegram_id>",
            parse_mode="HTML"
        )
        return

    telegram_id = args[1].strip()

    if not telegram_id.isdigit():
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
        return

    db = get_db()
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.delete(user)
        db.commit()

        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.\n\n"
            f"Telegram ID: <code>{telegram_id}</code>\n"
            f"–†–æ–ª—å: <b>{user.role}</b>",
            parse_mode="HTML"
        )
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telegram_id}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    finally:
        db.close()


@router.message(Command("setactive"))
async def cmd_setactive(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –§–æ—Ä–º–∞—Ç: /setactive <telegram_id> <true/false>
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    args = message.text.split()
    if len(args) < 3:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setactive <telegram_id> <true/false>",
            parse_mode="HTML"
        )
        return

    telegram_id = args[1].strip()
    is_active_str = args[2].strip().lower()

    if not telegram_id.isdigit():
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.")
        return

    if is_active_str not in ["true", "false"]:
        await message.answer("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å true –∏–ª–∏ false.")
        return

    is_active = is_active_str == "true"

    db = get_db()
    try:
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å Telegram ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        user.is_active = is_active
        db.commit()

        status = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if is_active else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {status}.\n\n"
            f"Telegram ID: <code>{telegram_id}</code>\n"
            f"–†–æ–ª—å: <b>{user.role}</b>",
            parse_mode="HTML"
        )
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–∞ {is_active}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    finally:
        db.close()
