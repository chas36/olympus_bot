"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_parser_debug.py <–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É.docx>
    
–ü—Ä–∏–º–µ—Ä:
    python test_parser_debug.py "8–ò.docx"
"""

# –ö—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞ —É—á–µ–Ω–∏–∫–∞
CODE_VALIDATION_CRITERIA = ['/', 'sbph']

import sys
from parser.docx_parser import parse_olympiad_file

def main():
    if len(sys.argv) < 2:
        print("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python test_parser_debug.py <—Ñ–∞–π–ª.docx>")
        print("\n–ü—Ä–∏–º–µ—Ä:")
        print('  python test_parser_debug.py "8–ò.docx"')
        return
    
    file_path = sys.argv[1]
    
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ —Ñ–∞–π–ª–µ: {file_path}")
    print("=" * 70)
    
    try:
        # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª
        result = parse_olympiad_file(file_path)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê")
        print("=" * 70)
        
        print(f"\nüìö –ü—Ä–µ–¥–º–µ—Ç: {result['subject']}")
        
        print(f"\nüë• –ö–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞: {len(result['grade8_codes'])} —É—á–µ–Ω–∏–∫–æ–≤")
        if result['grade8_codes']:
            print("\n–ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
            for i, student in enumerate(result['grade8_codes'][:5], 1):
                print(f"  {i}. {student['full_name']}")
                print(f"     –ö–æ–¥: {student['code']}")
            
            if len(result['grade8_codes']) > 5:
                print(f"\n  ... –∏ –µ—â–µ {len(result['grade8_codes']) - 5} —É—á–µ–Ω–∏–∫–æ–≤")
        else:
            print("  ‚ö†Ô∏è –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        print(f"\nüéì –ö–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞: {len(result['grade9_codes'])} –∫–æ–¥–æ–≤")
        if result['grade9_codes']:
            print("\n–ü–µ—Ä–≤—ã–µ 5 –∫–æ–¥–æ–≤:")
            for i, code in enumerate(result['grade9_codes'][:5], 1):
                print(f"  {i}. {code}")
            
            if len(result['grade9_codes']) > 5:
                print(f"\n  ... –∏ –µ—â–µ {len(result['grade9_codes']) - 5} –∫–æ–¥–æ–≤")
        else:
            print("  ‚ö†Ô∏è –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        print("\n" + "=" * 70)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        print("\nüîç –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê:")
        
        if not result['grade8_codes']:
            print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã")
        else:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result['grade8_codes'])} –∫–æ–¥–æ–≤ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞")
        
        if not result['grade9_codes']:
            print("  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–∫—Ü–∏—é '9 –∫–ª–∞—Å—Å'")
        else:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(result['grade9_codes'])} –∫–æ–¥–æ–≤ –¥–ª—è 9 –∫–ª–∞—Å—Å–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–¥–æ–≤
        invalid_codes_8 = []
        for student in result['grade8_codes']:
            code = student['code']
            if not code or not any(c in code for c in CODE_VALIDATION_CRITERIA):
                invalid_codes_8.append(student['full_name'])
        
        if invalid_codes_8:
            print(f"\n  ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞ —É {len(invalid_codes_8)} —É—á–µ–Ω–∏–∫–æ–≤:")
            for name in invalid_codes_8[:3]:
                print(f"    - {name}")
        
        print("\n" + "=" * 70)
        print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        return result
        
    except FileNotFoundError:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª '{file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É")
        return None
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        import traceback
        print("\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        traceback.print_exc()
        return None


if __name__ == "__main__":
    result = main()
    
    if result is None:
        sys.exit(1)
    else:
        sys.exit(0)