"""
–¢–µ—Å—Ç—ã –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞ .docx —Ñ–∞–π–ª–æ–≤
"""

import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from parser.docx_parser import parse_olympiad_file


def test_parse_sample_file():
    """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —Ñ–∞–π–ª—É
    test_file = "8√ê.docx"
    
    if not os.path.exists(test_file):
        print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üìÑ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: {test_file}")
    
    try:
        result = parse_olympiad_file(test_file)
        
        print(f"\n‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
        print(f"\n–ü—Ä–µ–¥–º–µ—Ç: {result['subject']}")
        print(f"–ö–æ–¥–æ–≤ 8 –∫–ª–∞—Å—Å–∞: {len(result['grade8_codes'])}")
        print(f"–ö–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞: {len(result['grade9_codes'])}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        assert 'subject' in result, "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥–º–µ—Ç"
        assert 'grade8_codes' in result, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞"
        assert 'grade9_codes' in result, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        assert len(result['grade8_codes']) > 0, "–ù–µ—Ç –∫–æ–¥–æ–≤ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞"
        assert len(result['grade9_codes']) > 0, "–ù–µ—Ç –∫–æ–¥–æ–≤ –¥–ª—è 9 –∫–ª–∞—Å—Å–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–¥–æ–≤ 8 –∫–ª–∞—Å—Å–∞
        for code_data in result['grade8_codes'][:3]:
            print(f"\n–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ 8 –∫–ª–∞—Å—Å–∞:")
            print(f"  –ù–æ–º–µ—Ä: {code_data.get('number')}")
            print(f"  –§–ò–û: {code_data.get('full_name')}")
            print(f"  –ö–æ–¥: {code_data.get('code')}")
            
            assert 'full_name' in code_data, "–ù–µ—Ç –§–ò–û"
            assert 'code' in code_data, "–ù–µ—Ç –∫–æ–¥–∞"
            assert code_data['full_name'], "–§–ò–û –ø—É—Å—Ç–æ–µ"
            assert code_data['code'], "–ö–æ–¥ –ø—É—Å—Ç–æ–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞
        print(f"\n–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞:")
        for code in result['grade9_codes'][:3]:
            print(f"  {code}")
            assert code, "–ü—É—Å—Ç–æ–π –∫–æ–¥"
        
        print(f"\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_parse_structure():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    test_file = "8√ê.docx"
    
    if not os.path.exists(test_file):
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ - —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return True
    
    result = parse_olympiad_file(test_file)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for code_data in result['grade8_codes']:
        assert isinstance(code_data, dict), "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'full_name' in code_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –§–ò–û"
        assert 'code' in code_data, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥"
        assert isinstance(code_data['full_name'], str), "–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
        assert isinstance(code_data['code'], str), "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏
    for code in result['grade9_codes']:
        assert isinstance(code, str), "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π"
        assert code.strip(), "–ö–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


if __name__ == "__main__":
    print("=" * 60)
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ –æ–ª–∏–º–ø–∏–∞–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("=" * 60)
    print()
    
    tests = [
        ("–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏–º–µ—Ä–∞ —Ñ–∞–π–ª–∞", test_parse_sample_file),
        ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö", test_parse_structure),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\n{'=' * 60}")
        print(f"üìù –¢–µ—Å—Ç: {test_name}")
        print(f"{'=' * 60}")
        
        try:
            if test_func():
                passed += 1
                print(f"\n‚úÖ PASSED")
            else:
                failed += 1
                print(f"\n‚ùå FAILED")
        except Exception as e:
            failed += 1
            print(f"\n‚ùå FAILED: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\n{'=' * 60}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"  ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"  üìä –í—Å–µ–≥–æ: {len(tests)}")
    print(f"{'=' * 60}")
    
    sys.exit(0 if failed == 0 else 1)
