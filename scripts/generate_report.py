"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/generate_report.py [--session-id ID] [--format FORMAT]

–§–æ—Ä–º–∞—Ç—ã: console, csv, excel, html
"""

import asyncio
import sys
import os
from datetime import datetime
import argparse

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database.database import AsyncSessionLocal, init_db
from database import crud


async def generate_console_report(session_id: int = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª—å"""
    
    async with AsyncSessionLocal() as session:
        if session_id:
            olympiad_session = await crud.get_session_by_id(session, session_id)
        else:
            olympiad_session = await crud.get_active_session(session)
        
        if not olympiad_session:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
        all_requests = await crud.get_all_requests_for_session(session, olympiad_session.id)
        all_students = await crud.get_all_students(session)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        registered_count = len([s for s in all_students if s.is_registered])
        requested_code = len(all_requests)
        grade8_count = len([r for r in all_requests if r.grade == 8])
        grade9_count = len([r for r in all_requests if r.grade == 9])
        screenshot_count = len([r for r in all_requests if r.screenshot_submitted])
        
        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print("\n" + "=" * 70)
        print(f"üìä –û–¢–ß–ï–¢ –ü–û –û–õ–ò–ú–ü–ò–ê–î–ï")
        print("=" * 70)
        print(f"\nüìö –ü—Ä–µ–¥–º–µ—Ç: {olympiad_session.subject}")
        print(f"üìÖ –î–∞—Ç–∞: {olympiad_session.date.strftime('%d.%m.%Y %H:%M')}")
        print(f"\n{'=' * 70}")
        print(f"\nüë• –£–ß–ï–ù–ò–ö–ò:")
        print(f"   –í—Å–µ–≥–æ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_students)}")
        print(f"   –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: {registered_count}")
        print(f"\nüìù –ö–û–î–´ –û–õ–ò–ú–ü–ò–ê–î–´:")
        print(f"   –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–¥: {requested_code}")
        print(f"   - 8 –∫–ª–∞—Å—Å: {grade8_count}")
        print(f"   - 9 –∫–ª–∞—Å—Å: {grade9_count}")
        print(f"\nüì∏ –°–ö–†–ò–ù–®–û–¢–´:")
        print(f"   –ü—Ä–∏—Å–ª–∞–ª–∏: {screenshot_count}")
        print(f"   –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏: {requested_code - screenshot_count}")
        if requested_code > 0:
            percentage = (screenshot_count / requested_code) * 100
            print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç: {percentage:.1f}%")
        
        print(f"\n{'=' * 70}")
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –£–ß–ï–ù–ò–ö–ê–ú:")
        print(f"{'=' * 70}\n")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∑–∞–ø—Ä–æ—Å–æ–≤
        requests_dict = {r.student_id: r for r in all_requests}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Ç–µ, –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–¥
        students_with_codes = [(s, requests_dict[s.id]) for s in all_students if s.id in requests_dict]
        students_without_codes = [s for s in all_students if s.id not in requests_dict]
        
        # –£—á–µ–Ω–∏–∫–∏ —Å –∫–æ–¥–∞–º–∏
        if students_with_codes:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–¥:\n")
            for student, request in students_with_codes:
                screenshot_icon = "‚úÖ" if request.screenshot_submitted else "‚ùå"
                print(f"  {student.full_name}")
                print(f"    –ö–ª–∞—Å—Å: {request.grade} | –°–∫—Ä–∏–Ω—à–æ—Ç: {screenshot_icon}")
                print(f"    –ö–æ–¥: {request.code}")
                print(f"    –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {request.requested_at.strftime('%d.%m.%Y %H:%M')}")
                if request.screenshot_submitted:
                    print(f"    –°–∫—Ä–∏–Ω—à–æ—Ç: {request.screenshot_submitted_at.strftime('%d.%m.%Y %H:%M')}")
                print()
        
        # –£—á–µ–Ω–∏–∫–∏ –±–µ–∑ –∫–æ–¥–æ–≤
        if students_without_codes:
            print("\n‚ùå –ù–µ –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –∫–æ–¥:\n")
            for student in students_without_codes:
                status = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if student.is_registered else "‚ùå –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
                print(f"  {student.full_name} ({status})")
            print()
        
        print("=" * 70 + "\n")


async def generate_csv_report(session_id: int = None, output_file: str = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ"""
    import csv
    
    if not output_file:
        output_file = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    async with AsyncSessionLocal() as session:
        if session_id:
            olympiad_session = await crud.get_session_by_id(session, session_id)
        else:
            olympiad_session = await crud.get_active_session(session)
        
        if not olympiad_session:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        all_requests = await crud.get_all_requests_for_session(session, olympiad_session.id)
        all_students = await crud.get_all_students(session)
        
        requests_dict = {r.student_id: r for r in all_requests}
        
        with open(output_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            writer.writerow([
                '–§–ò–û', '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'Telegram ID',
                '–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω', '–ö–ª–∞—Å—Å', '–ö–æ–¥ –æ–ª–∏–º–ø–∏–∞–¥—ã',
                '–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞', '–°–∫—Ä–∏–Ω—à–æ—Ç', '–í—Ä–µ–º—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞'
            ])
            
            # –î–∞–Ω–Ω—ã–µ
            for student in all_students:
                request = requests_dict.get(student.id)
                
                row = [
                    student.full_name,
                    '–î–∞' if student.is_registered else '–ù–µ—Ç',
                    student.telegram_id or '-',
                    '–î–∞' if request else '–ù–µ—Ç',
                    request.grade if request else '-',
                    request.code if request else '-',
                    request.requested_at.strftime('%d.%m.%Y %H:%M') if request else '-',
                    '–î–∞' if (request and request.screenshot_submitted) else '–ù–µ—Ç',
                    request.screenshot_submitted_at.strftime('%d.%m.%Y %H:%M') if (request and request.screenshot_submitted_at) else '-'
                ]
                
                writer.writerow(row)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")


async def generate_excel_report(session_id: int = None, output_file: str = None):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –≤ Excel —Ñ–æ—Ä–º–∞—Ç–µ"""
    try:
        import pandas as pd
    except ImportError:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ pandas –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Excel –æ—Ç—á–µ—Ç–æ–≤: pip install pandas openpyxl")
        return
    
    if not output_file:
        output_file = f"report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
    
    async with AsyncSessionLocal() as session:
        if session_id:
            olympiad_session = await crud.get_session_by_id(session, session_id)
        else:
            olympiad_session = await crud.get_active_session(session)
        
        if not olympiad_session:
            print("‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        all_requests = await crud.get_all_requests_for_session(session, olympiad_session.id)
        all_students = await crud.get_all_students(session)
        
        requests_dict = {r.student_id: r for r in all_requests}
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = []
        for student in all_students:
            request = requests_dict.get(student.id)
            
            data.append({
                '–§–ò–û': student.full_name,
                '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω': '–î–∞' if student.is_registered else '–ù–µ—Ç',
                'Telegram ID': student.telegram_id or '-',
                '–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω': '–î–∞' if request else '–ù–µ—Ç',
                '–ö–ª–∞—Å—Å': request.grade if request else '-',
                '–ö–æ–¥ –æ–ª–∏–º–ø–∏–∞–¥—ã': request.code if request else '-',
                '–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞': request.requested_at.strftime('%d.%m.%Y %H:%M') if request else '-',
                '–°–∫—Ä–∏–Ω—à–æ—Ç': '–î–∞' if (request and request.screenshot_submitted) else '–ù–µ—Ç',
                '–í—Ä–µ–º—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞': request.screenshot_submitted_at.strftime('%d.%m.%Y %H:%M') if (request and request.screenshot_submitted_at) else '-'
            })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
        df = pd.DataFrame(data)
        
        with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–û—Ç—á–µ—Ç', index=False)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–û—Ç—á–µ—Ç']
            # Efficiently set column widths using vectorized operations
            for idx, col in enumerate(df.columns):
                max_length = max(df[col].astype(str).map(len).max(), len(str(col))) + 2
                col_letter = worksheet.cell(row=1, column=idx + 1).column_letter
                worksheet.column_dimensions[col_letter].width = max_length
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")


async def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –æ–ª–∏–º–ø–∏–∞–¥–µ')
    parser.add_argument('--session-id', type=int, help='ID —Å–µ—Å—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–Ω–∞—è)')
    parser.add_argument('--format', choices=['console', 'csv', 'excel'], default='console',
                        help='–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞')
    parser.add_argument('--output', help='–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')
    
    args = parser.parse_args()
    
    await init_db()
    
    if args.format == 'console':
        await generate_console_report(args.session_id)
    elif args.format == 'csv':
        await generate_csv_report(args.session_id, args.output)
    elif args.format == 'excel':
        await generate_excel_report(args.session_id, args.output)


if __name__ == "__main__":
    asyncio.run(main())
