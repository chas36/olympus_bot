"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/add_students_from_file.py students.txt

–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ students.txt (–∫–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):
    –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á
    –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á
    –°–∏–¥–æ—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from database.database import AsyncSessionLocal, init_db
from database import crud
from utils.auth import generate_multiple_codes


async def add_students_from_file(filename: str):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(filename):
        print(f"‚ùå –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    with open(filename, 'r', encoding='utf-8') as f:
        students = [line.strip() for line in f if line.strip()]
    
    if not students:
        print("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π!")
        return
    
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}")
    print("\n–£—á–µ–Ω–∏–∫–∏:")
    for i, student in enumerate(students, 1):
        print(f"  {i}. {student}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input(f"\n–î–æ–±–∞–≤–∏—Ç—å {len(students)} —É—á–µ–Ω–∏–∫–æ–≤? (yes/no): ")
    if confirm.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await init_db()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥—ã
    print("\nüîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤...")
    codes = generate_multiple_codes(len(students))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–µ–Ω–∏–∫–æ–≤
    print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    results = []
    async with AsyncSessionLocal() as session:
        for student_name, code in zip(students, codes):
            try:
                student = await crud.create_student(
                    session,
                    full_name=student_name,
                    registration_code=code
                )
                results.append({
                    'name': student.full_name,
                    'code': student.registration_code,
                    'success': True
                })
                print(f"  ‚úÖ {student.full_name}")
            except Exception as e:
                results.append({
                    'name': student_name,
                    'code': code,
                    'success': False,
                    'error': str(e)
                })
                print(f"  ‚ùå {student_name}: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    success_count = sum(1 for r in results if r['success'])
    print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {success_count}/{len(students)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥—ã –≤ —Ñ–∞–π–ª
    output_filename = f"registration_codes_{os.path.basename(filename)}"
    with open(output_filename, 'w', encoding='utf-8') as f:
        f.write("–§–ò–û | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–¥\n")
        f.write("-" * 70 + "\n")
        for result in results:
            if result['success']:
                f.write(f"{result['name']} | {result['code']}\n")
    
    print(f"\nüìÑ –ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_filename}")
    print("\n‚ö†Ô∏è  –†–∞–∑–¥–∞–π—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã —É—á–µ–Ω–∏–∫–∞–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ!")


async def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/add_students_from_file.py <—Ñ–∞–π–ª_—Å_—É—á–µ–Ω–∏–∫–∞–º–∏.txt>")
        print("\n–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: –∫–∞–∂–¥—ã–π —É—á–µ–Ω–∏–∫ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ")
        print("–ü—Ä–∏–º–µ—Ä:")
        print("  –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
        print("  –ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á")
        return
    
    filename = sys.argv[1]
    await add_students_from_file(filename)


if __name__ == "__main__":
    asyncio.run(main())
