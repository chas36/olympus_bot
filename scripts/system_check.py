#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ù–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞
- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
- –°—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
- –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/system_check.py
"""

import os
import sys
from pathlib import Path
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
class Colors:
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    BOLD = '\033[1m'
    END = '\033[0m'


def print_header(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print(f"\n{Colors.BOLD}{Colors.BLUE}{'=' * 60}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{text}{Colors.END}")
    print(f"{Colors.BOLD}{Colors.BLUE}{'=' * 60}{Colors.END}\n")


def print_ok(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —É—Å–ø–µ—Ö"""
    print(f"{Colors.GREEN}‚úÖ {text}{Colors.END}")


def print_error(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –æ—à–∏–±–∫—É"""
    print(f"{Colors.RED}‚ùå {text}{Colors.END}")


def print_warning(text):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"{Colors.YELLOW}‚ö†Ô∏è  {text}{Colors.END}")


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
PLACEHOLDER_PREFIXES = ['your_', 'STRONG_PASSWORD']

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    print_header("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞")
    
    if not os.path.exists('.env'):
        print_error("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ .env.example: cp .env.example .env")
        return False
    
    print_ok("–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    from dotenv import load_dotenv
    load_dotenv()
    
    required_vars = [
        'BOT_TOKEN',
        'DATABASE_URL',
        'DATABASE_URL_SYNC',
        'SECRET_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value or any(value.startswith(prefix) for prefix in PLACEHOLDER_PREFIXES):
            missing_vars.append(var)
            print_error(f"  {var} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        else:
            print_ok(f"  {var} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    if missing_vars:
        print_error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return False
    
    return True


def check_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print_header("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    
    required_dirs = [
        'bot',
        'api',
        'database',
        'parser',
        'tasks',
        'utils',
        'admin_panel',
        'uploads',
        'screenshots',
        'logs'
    ]
    
    all_exist = True
    for directory in required_dirs:
        if os.path.exists(directory):
            print_ok(f"  {directory}/")
        else:
            print_error(f"  {directory}/ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            all_exist = False
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs(directory, exist_ok=True)
            print_warning(f"    –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {directory}/")
    
    return all_exist


def check_python_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
    print_header("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤")
    
    required_packages = {
        'aiogram': 'aiogram',
        'fastapi': 'fastapi',
        'sqlalchemy': 'sqlalchemy',
        'asyncpg': 'asyncpg',
        'psycopg2': 'psycopg2',
        'python-docx': 'docx',
        'apscheduler': 'apscheduler',
        'python-dotenv': 'dotenv',
        'uvicorn': 'uvicorn',
        'alembic': 'alembic',
    }
    
    missing_packages = []
    for package_name, import_name in required_packages.items():
        try:
            __import__(import_name)
            print_ok(f"  {package_name}")
        except ImportError:
            print_error(f"  {package_name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package_name)
    
    if missing_packages:
        print_error("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    return True


async def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    print_header("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        from database.database import async_engine
        from sqlalchemy import text
        
        async with async_engine.begin() as conn:
            result = await conn.execute(text("SELECT 1"))
            result.scalar()
        
        print_ok("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
        async with async_engine.begin() as conn:
            result = await conn.execute(
                text("SELECT tablename FROM pg_tables WHERE schemaname = 'public'")
            )
            tables = [row[0] for row in result]
        
        if tables:
            print_ok(f"  –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            for table in tables:
                print(f"    - {table}")
        else:
            print_warning("  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("    –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python main.py init")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ DATABASE_URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False


async def check_telegram_bot():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞"""
    print_header("5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –±–æ—Ç–∞")
    
    try:
        from aiogram import Bot
        from dotenv import load_dotenv
        
        load_dotenv()
        bot_token = os.getenv('BOT_TOKEN')
        
        if not bot_token or bot_token.startswith('your_'):
            print_error("BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
        
        bot = Bot(token=bot_token)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        me = await bot.get_me()
        print_ok(f"–ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{me.username}")
        print(f"   ID: {me.id}")
        print(f"   –ò–º—è: {me.first_name}")
        
        await bot.session.close()
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å BOT_TOKEN")
        return False


def check_parser():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞"""
    print_header("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    try:
        from parser.docx_parser import parse_olympiad_file
        print_ok("–ü–∞—Ä—Å–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        test_file = "8√ê.docx"
        if os.path.exists(test_file):
            print_ok(f"  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {test_file}")
            try:
                result = parse_olympiad_file(test_file)
                print_ok(f"  –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω:")
                print(f"    - –ü—Ä–µ–¥–º–µ—Ç: {result['subject']}")
                print(f"    - –ö–æ–¥–æ–≤ 8 –∫–ª–∞—Å—Å–∞: {len(result['grade8_codes'])}")
                print(f"    - –ö–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞: {len(result['grade9_codes'])}")
            except Exception as e:
                print_error(f"  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
                return False
        else:
            print_warning(f"  –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {test_file} –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)")
        
        return True
        
    except Exception as e:
        print_error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"\n{Colors.BOLD}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã Olympus Bot{Colors.END}")
    
    checks = [
        ("ENV —Ñ–∞–π–ª", check_env_file()),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", check_directories()),
        ("Python –ø–∞–∫–µ—Ç—ã", check_python_packages()),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", await check_database()),
        ("Telegram –±–æ—Ç", await check_telegram_bot()),
        ("–ü–∞—Ä—Å–µ—Ä", check_parser()),
    ]
    
    print_header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏")
    
    passed = sum(1 for _, result in checks if result)
    total = len(checks)
    
    for name, result in checks:
        status = f"{Colors.GREEN}‚úÖ OK{Colors.END}" if result else f"{Colors.RED}‚ùå FAILED{Colors.END}"
        print(f"  {name}: {status}")
    
    print(f"\n{Colors.BOLD}–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}{Colors.END}")
    
    if passed == total:
        print(f"\n{Colors.GREEN}{Colors.BOLD}‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!{Colors.END}")
        print(f"\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print(f"  {Colors.BLUE}python main.py all{Colors.END}  (–±–æ—Ç + API)")
        print(f"  {Colors.BLUE}docker-compose up -d{Colors.END}  (—á–µ—Ä–µ–∑ Docker)")
        return 0
    else:
        print(f"\n{Colors.RED}{Colors.BOLD}‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É{Colors.END}")
        print(f"\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É —Å–Ω–æ–≤–∞")
        return 1


if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
