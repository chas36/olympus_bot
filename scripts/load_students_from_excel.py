#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ Excel –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ë–î
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from parser.excel_parser import parse_students_excel
from database.database import AsyncSessionLocal
from database.models import Student
from utils.auth import generate_multiple_codes


async def load_students(excel_file: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ Excel"""
    print(f"\nüìö –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ {excel_file}")
    print("=" * 60)
    
    # –ü–∞—Ä—Å–∏–º Excel
    students, validation = parse_students_excel(excel_file)
    
    print(f"\n‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {len(students)} —É—á–µ–Ω–∏–∫–æ–≤")
    print(f"\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for class_num in sorted(validation["class_distribution"].keys()):
        count = validation["class_distribution"][class_num]
        print(f"  {class_num} –∫–ª–∞—Å—Å: {count} —É—á–µ–Ω–∏–∫–æ–≤")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    if validation["duplicates"]:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(validation['duplicates'])}")
        for dup in validation["duplicates"][:3]:
            print(f"  - {dup['name']}")
    
    if validation["invalid_names"]:
        print(f"\n‚ö†Ô∏è  –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞: {len(validation['invalid_names'])}")
        for inv in validation["invalid_names"][:3]:
            print(f"  - {inv['name']}")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    response = input(f"\n‚ùì –ó–∞–≥—Ä—É–∑–∏—Ç—å {len(students)} —É—á–µ–Ω–∏–∫–æ–≤ –≤ –ë–î? (yes/no): ")
    if response.lower() not in ['yes', 'y', '–¥–∞', '–¥']:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    print("\nÔøΩÔøΩ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
    reg_codes = generate_multiple_codes(len(students))
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ë–î
    async with AsyncSessionLocal() as session:
        created_count = 0
        skipped_count = 0
        
        for student_data, reg_code in zip(students, reg_codes):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
            from sqlalchemy import select
            result = await session.execute(
                select(Student).where(Student.full_name == student_data["full_name"])
            )
            existing = result.scalar_one_or_none()
            
            if existing:
                print(f"  ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫: {student_data['full_name']} (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                skipped_count += 1
                continue
            
            # –°–æ–∑–¥–∞–µ–º —É—á–µ–Ω–∏–∫–∞
            student = Student(
                full_name=student_data["full_name"],
                registration_code=reg_code,
                is_registered=False
            )
            session.add(student)
            created_count += 1
            
            if created_count % 50 == 0:
                print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {created_count}")
        
        await session.commit()
        
        print(f"\n{'='*60}")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"  –°–æ–∑–¥–∞–Ω–æ: {created_count}")
        print(f"  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print(f"{'='*60}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python load_students_from_excel.py <—Ñ–∞–π–ª.xlsx>")
        sys.exit(1)
    
    asyncio.run(load_students(sys.argv[1]))
