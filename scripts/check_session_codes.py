"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
"""
import asyncio
import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parent.parent))

from database.database import AsyncSessionLocal
from database.models import Grade8Code, Grade9Code, OlympiadSession
from sqlalchemy import select, and_, func


async def check_session_codes(session_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥—ã –¥–ª—è —Å–µ—Å—Å–∏–∏"""

    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
        result = await session.execute(
            select(OlympiadSession).where(OlympiadSession.id == session_id)
        )
        olympiad = result.scalar_one_or_none()

        if not olympiad:
            print(f"‚ùå –°–µ—Å—Å–∏—è {session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        print(f"üìö –°–µ—Å—Å–∏—è: {olympiad.subject}")
        print(f"   ID: {olympiad.id}")
        print(f"   –ê–∫—Ç–∏–≤–Ω–∞: {olympiad.is_active}")
        print(f"   –î–∞—Ç–∞: {olympiad.date}")

        # –ö–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞
        result = await session.execute(
            select(func.count(Grade8Code.id)).where(Grade8Code.session_id == session_id)
        )
        total_grade8 = result.scalar()

        result = await session.execute(
            select(func.count(Grade8Code.id)).where(
                and_(
                    Grade8Code.session_id == session_id,
                    Grade8Code.student_id.isnot(None)
                )
            )
        )
        assigned_grade8 = result.scalar()

        print(f"\nüî¢ –ö–æ–¥—ã 8 –∫–ª–∞—Å—Å–∞:")
        print(f"   –í—Å–µ–≥–æ: {total_grade8}")
        print(f"   –ü—Ä–∏–≤—è–∑–∞–Ω–æ –∫ —É—á–µ–Ω–∏–∫–∞–º: {assigned_grade8}")
        print(f"   –ë–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏: {total_grade8 - assigned_grade8}")

        # –ö–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞
        result = await session.execute(
            select(func.count(Grade9Code.id)).where(Grade9Code.session_id == session_id)
        )
        total_grade9 = result.scalar()

        result = await session.execute(
            select(func.count(Grade9Code.id)).where(
                and_(
                    Grade9Code.session_id == session_id,
                    Grade9Code.is_used == False
                )
            )
        )
        available_grade9 = result.scalar()

        print(f"\nüî¢ –ö–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞:")
        print(f"   –í—Å–µ–≥–æ: {total_grade9}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ): {available_grade9}")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python check_session_codes.py <session_id>")
        sys.exit(1)

    session_id = int(sys.argv[1])
    asyncio.run(check_session_codes(session_id))
