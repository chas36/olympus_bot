"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from database.database import AsyncSessionLocal
from database.models import Student
from parser.excel_parser import parse_students_excel
from sqlalchemy import select


async def update_student_classes(excel_path: str):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞—Å—Å—ã —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞"""

    # –ü–∞—Ä—Å–∏–º Excel
    print(f"üìñ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: {excel_path}")
    students_data, validation = parse_students_excel(excel_path)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(students_data)} —É—á–µ–Ω–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª–µ")
    print(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–ª–∞—Å—Å–∞–º:")
    for class_num in sorted(validation["class_distribution"].keys()):
        count = validation["class_distribution"][class_num]
        print(f"   {class_num} –∫–ª–∞—Å—Å: {count} —É—á–µ–Ω–∏–∫–æ–≤")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    async with AsyncSessionLocal() as session:
        updated = 0
        not_found = 0

        for student_data in students_data:
            # –ò—â–µ–º —É—á–µ–Ω–∏–∫–∞ –ø–æ –§–ò–û
            result = await session.execute(
                select(Student).where(Student.full_name == student_data["full_name"])
            )
            student = result.scalar_one_or_none()

            if student:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å
                student.class_number = student_data.get("class_number")
                student.parallel = student_data.get("parallel")
                updated += 1
            else:
                not_found += 1
                print(f"‚ö†Ô∏è  –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {student_data['full_name']}")

        await session.commit()

        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated} —É—á–µ–Ω–∏–∫–æ–≤")
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î: {not_found} —É—á–µ–Ω–∏–∫–æ–≤")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/update_student_classes.py <—Ñ–∞–π–ª.xlsx>")
        sys.exit(1)

    excel_path = sys.argv[1]

    if not Path(excel_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
        sys.exit(1)

    asyncio.run(update_student_classes(excel_path))
