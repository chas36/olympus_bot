"""
–°–∫—Ä–∏–ø—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–∞–º–∏ (–í–∞—Ä–∏–∞–Ω—Ç 1)

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
1. –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–¥—ã –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–∞–º–∏ –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ (5-11)
2. –î–ª—è 8 –∫–ª–∞—Å—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ—Ç –∫–æ–¥—ã –∏–∑ –ø—É–ª–∞ 9 –∫–ª–∞—Å—Å–∞
3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ Excel —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
4. –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç:
   - –û—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É: –§–ò–û - –ö–æ–¥
   - –î–ª—è 8 –∫–ª–∞—Å—Å–∞: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/distribute_codes.py --session-id 1
    python scripts/distribute_codes.py --session-id 1 --output-dir exports/
"""

import asyncio
import argparse
import os
from datetime import datetime
from collections import defaultdict
from sqlalchemy import select, func, and_
from sqlalchemy.ext.asyncio import AsyncSession

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
import sys
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from database.database import get_async_session
from database.models import Student, OlympiadSession, OlympiadCode, Grade8ReserveCode
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side


class CodeDistributor:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–∞–º–∏"""

    def __init__(self, session: AsyncSession, olympiad_session_id: int):
        self.session = session
        self.olympiad_session_id = olympiad_session_id
        self.stats = defaultdict(lambda: {
            'students': 0,
            'codes_assigned': 0,
            'codes_available': 0,
            'reserve_codes': 0
        })

    async def distribute_all(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤"""
        print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ {self.olympiad_session_id}")
        print("=" * 80)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
        olympiad = await self.session.get(OlympiadSession, self.olympiad_session_id)
        if not olympiad:
            raise ValueError(f"–°–µ—Å—Å–∏—è {self.olympiad_session_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        print(f"üìö –û–ª–∏–º–ø–∏–∞–¥–∞: {olympiad.subject}")
        print(f"üìÖ –î–∞—Ç–∞: {olympiad.date}")
        print()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º
        students_by_class = await self._get_students_by_class()

        if not students_by_class:
            print("‚ö†Ô∏è  –ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞
        for class_number in sorted(students_by_class.keys()):
            await self._distribute_for_class(class_number, students_by_class[class_number])

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞ - —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã
        if 8 in students_by_class:
            await self._distribute_reserve_codes_for_grade8(students_by_class[8])

        # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await self.session.commit()

        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._print_statistics()

        print("\n‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

    async def _get_students_by_class(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–ª–∞—Å—Å–∞–º"""
        result = await self.session.execute(
            select(Student)
            .where(Student.class_number.isnot(None))
            .order_by(Student.class_number, Student.parallel, Student.full_name)
        )
        students = result.scalars().all()

        students_by_class = defaultdict(list)
        for student in students:
            students_by_class[student.class_number].append(student)

        print(f"üë• –ù–∞–π–¥–µ–Ω–æ —É—á–µ–Ω–∏–∫–æ–≤:")
        for class_num in sorted(students_by_class.keys()):
            print(f"   {class_num} –∫–ª–∞—Å—Å: {len(students_by_class[class_num])} —á–µ–ª.")
        print()

        return students_by_class

    async def _distribute_for_class(self, class_number: int, students: list):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
        print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {class_number} –∫–ª–∞—Å—Å...")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
        result = await self.session.execute(
            select(OlympiadCode)
            .where(
                and_(
                    OlympiadCode.session_id == self.olympiad_session_id,
                    OlympiadCode.class_number == class_number,
                    OlympiadCode.is_assigned == False
                )
            )
            .order_by(OlympiadCode.id)
        )
        available_codes = result.scalars().all()

        if not available_codes:
            print(f"   ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è {class_number} –∫–ª–∞—Å—Å–∞")
            self.stats[class_number]['students'] = len(students)
            return

        if len(available_codes) < len(students):
            print(f"   ‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤! –ù—É–∂–Ω–æ: {len(students)}, –î–æ—Å—Ç—É–ø–Ω–æ: {len(available_codes)}")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥—ã –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–∞–º–∏
        assigned_count = 0
        for i, student in enumerate(students):
            if i >= len(available_codes):
                break

            code = available_codes[i]
            code.student_id = student.id
            code.is_assigned = True
            code.assigned_at = datetime.utcnow()
            assigned_count += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats[class_number]['students'] = len(students)
        self.stats[class_number]['codes_assigned'] = assigned_count
        self.stats[class_number]['codes_available'] = len(available_codes) - assigned_count

        print(f"   ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {assigned_count}/{len(students)}")

    async def _distribute_reserve_codes_for_grade8(self, grade8_students: list):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã –∏–∑ –ø—É–ª–∞ 9 –∫–ª–∞—Å—Å–∞ –¥–ª—è 8-–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤"""
        print(f"\nüîÑ –í—ã–¥–µ–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞...")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º 8-–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤ –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª—è–º
        students_by_parallel = defaultdict(list)
        for student in grade8_students:
            parallel = f"8{student.parallel or ''}"
            students_by_parallel[parallel].append(student)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–¥—ã 9 –∫–ª–∞—Å—Å–∞
        result = await self.session.execute(
            select(OlympiadCode)
            .where(
                and_(
                    OlympiadCode.session_id == self.olympiad_session_id,
                    OlympiadCode.class_number == 9,
                    OlympiadCode.is_assigned == False
                )
            )
            .order_by(OlympiadCode.id)
        )
        grade9_codes = result.scalars().all()

        if not grade9_codes:
            print("   ‚ö†Ô∏è  –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–∞")
            return

        print(f"   üì¶ –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–¥–æ–≤ 9 –∫–ª–∞—Å—Å–∞: {len(grade9_codes)}")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥—ã —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –º–µ–∂–¥—É –ø–∞—Ä–∞–ª–ª–µ–ª—è–º–∏ 8 –∫–ª–∞—Å—Å–∞
        codes_per_parallel = len(grade9_codes) // len(students_by_parallel)
        total_allocated = 0

        code_index = 0
        for parallel, students in sorted(students_by_parallel.items()):
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª–∏
            codes_needed = len(students)
            codes_to_allocate = min(codes_needed, codes_per_parallel, len(grade9_codes) - code_index)

            for i in range(codes_to_allocate):
                if code_index >= len(grade9_codes):
                    break

                reserve_code = Grade8ReserveCode(
                    session_id=self.olympiad_session_id,
                    class_parallel=parallel,
                    code=grade9_codes[code_index].code
                )
                self.session.add(reserve_code)
                code_index += 1
                total_allocated += 1

            self.stats[8]['reserve_codes'] += codes_to_allocate
            print(f"   ‚úÖ {parallel}: –≤—ã–¥–µ–ª–µ–Ω–æ {codes_to_allocate} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–¥–æ–≤")

        print(f"   üìä –í—Å–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–¥–æ–≤: {total_allocated}")

    def _print_statistics(self):
        """–í—ã–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "=" * 80)
        print("üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 80)

        for class_number in sorted(self.stats.keys()):
            stats = self.stats[class_number]
            print(f"\n{class_number} –∫–ª–∞—Å—Å:")
            print(f"  üë• –£—á–µ–Ω–∏–∫–æ–≤: {stats['students']}")
            print(f"  ‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∫–æ–¥–æ–≤: {stats['codes_assigned']}")
            print(f"  üì¶ –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–¥–æ–≤: {stats['codes_available']}")
            if class_number == 8 and stats['reserve_codes'] > 0:
                print(f"  üîÑ –†–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–¥–æ–≤ (–∏–∑ 9 –∫–ª.): {stats['reserve_codes']}")


class ExcelExporter:
    """–≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –≤ Excel —Ñ–∞–π–ª—ã"""

    def __init__(self, session: AsyncSession, olympiad_session_id: int, output_dir: str = "exports"):
        self.session = session
        self.olympiad_session_id = olympiad_session_id
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)

    async def export_all(self):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤"""
        print(f"\nüìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {self.output_dir}")
        print("=" * 80)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ª–∏–º–ø–∏–∞–¥—É
        olympiad = await self.session.get(OlympiadSession, self.olympiad_session_id)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
        result = await self.session.execute(
            select(OlympiadCode.class_number)
            .where(
                and_(
                    OlympiadCode.session_id == self.olympiad_session_id,
                    OlympiadCode.is_assigned == True
                )
            )
            .distinct()
        )
        classes = [row[0] for row in result.fetchall()]

        for class_number in sorted(classes):
            await self._export_class(class_number, olympiad)

        print(f"\n‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤: {self.output_dir}")

    async def _export_class(self, class_number: int, olympiad: OlympiadSession):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ —Å –∫–æ–¥–∞–º–∏
        result = await self.session.execute(
            select(Student, OlympiadCode)
            .join(OlympiadCode, Student.id == OlympiadCode.student_id)
            .where(
                and_(
                    OlympiadCode.session_id == self.olympiad_session_id,
                    OlympiadCode.class_number == class_number,
                    OlympiadCode.is_assigned == True
                )
            )
            .order_by(Student.parallel, Student.full_name)
        )
        students_codes = result.fetchall()

        if not students_codes:
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª—è–º
        by_parallel = defaultdict(list)
        for student, code in students_codes:
            parallel = student.parallel or ''
            by_parallel[parallel].append((student, code))

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª–∏
        for parallel, data in sorted(by_parallel.items()):
            filename = f"{class_number}{parallel}.xlsx"
            filepath = os.path.join(self.output_dir, filename)

            await self._create_excel_file(filepath, class_number, parallel, data, olympiad)
            print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω: {filename} ({len(data)} —É—á–µ–Ω–∏–∫–æ–≤)")

    async def _create_excel_file(self, filepath: str, class_number: int, parallel: str, data: list, olympiad):
        """–°–æ–∑–¥–∞—Ç—å Excel —Ñ–∞–π–ª –¥–ª—è –∫–ª–∞—Å—Å–∞"""
        wb = Workbook()
        ws = wb.active
        ws.title = f"{class_number}{parallel}"

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, color="FFFFFF", size=12)
        header_fill = PatternFill(start_color="4472C4", end_color="4472C4", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws.merge_cells('A1:B1')
        ws['A1'] = f"–û–ª–∏–º–ø–∏–∞–¥–∞: {olympiad.subject} | –ö–ª–∞—Å—Å: {class_number}{parallel}"
        ws['A1'].font = Font(bold=True, size=14)
        ws['A1'].alignment = header_alignment

        ws.merge_cells('A2:B2')
        ws['A2'] = f"–î–∞—Ç–∞: {olympiad.date.strftime('%d.%m.%Y')}"
        ws['A2'].alignment = header_alignment

        # –¢–∞–±–ª–∏—Ü–∞ —Å –∫–æ–¥–∞–º–∏
        ws['A4'] = "–§–ò–û"
        ws['B4'] = "–ö–æ–¥"

        for col in ['A4', 'B4']:
            ws[col].font = header_font
            ws[col].fill = header_fill
            ws[col].alignment = header_alignment
            ws[col].border = border

        # –î–∞–Ω–Ω—ã–µ
        row = 5
        for student, code in data:
            ws[f'A{row}'] = student.full_name
            ws[f'B{row}'] = code.code

            for col in [f'A{row}', f'B{row}']:
                ws[col].border = border

            row += 1

        # –î–ª—è 8 –∫–ª–∞—Å—Å–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã
        if class_number == 8:
            await self._add_reserve_codes_sheet(wb, parallel)

        # –ê–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws.column_dimensions['A'].width = 40
        ws.column_dimensions['B'].width = 30

        wb.save(filepath)

    async def _add_reserve_codes_sheet(self, workbook: Workbook, parallel: str):
        """–î–æ–±–∞–≤–∏—Ç—å –ª–∏—Å—Ç —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏ –¥–ª—è 8 –∫–ª–∞—Å—Å–∞"""
        result = await self.session.execute(
            select(Grade8ReserveCode)
            .where(
                and_(
                    Grade8ReserveCode.session_id == self.olympiad_session_id,
                    Grade8ReserveCode.class_parallel == f"8{parallel}"
                )
            )
            .order_by(Grade8ReserveCode.id)
        )
        reserve_codes = result.scalars().all()

        if not reserve_codes:
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
        ws = workbook.create_sheet(title="–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã")

        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, color="FFFFFF", size=12)
        header_fill = PatternFill(start_color="FF6B6B", end_color="FF6B6B", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        ws.merge_cells('A1:B1')
        ws['A1'] = "–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã (–∏–∑ –ø—É–ª–∞ 9 –∫–ª–∞—Å—Å–∞)"
        ws['A1'].font = Font(bold=True, size=14, color="FF6B6B")
        ws['A1'].alignment = header_alignment

        ws.merge_cells('A2:B2')
        ws['A2'] = "–≠—Ç–∏ –∫–æ–¥—ã –≤—ã–¥–∞—é—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É –ª—é–±–æ–º—É —É—á–µ–Ω–∏–∫—É –∫–ª–∞—Å—Å–∞"
        ws['A2'].font = Font(italic=True, size=10)
        ws['A2'].alignment = header_alignment

        # –¢–∞–±–ª–∏—Ü–∞
        ws['A4'] = "‚Ññ"
        ws['B4'] = "–ö–æ–¥"

        for col in ['A4', 'B4']:
            ws[col].font = header_font
            ws[col].fill = header_fill
            ws[col].alignment = header_alignment

        # –î–∞–Ω–Ω—ã–µ
        for i, code in enumerate(reserve_codes, 1):
            ws[f'A{i+4}'] = i
            ws[f'B{i+4}'] = code.code

        ws.column_dimensions['A'].width = 10
        ws.column_dimensions['B'].width = 30


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–æ–≤ –º–µ–∂–¥—É —É—á–µ–Ω–∏–∫–∞–º–∏")
    parser.add_argument('--session-id', type=int, required=True, help='ID —Å–µ—Å—Å–∏–∏ –æ–ª–∏–º–ø–∏–∞–¥—ã')
    parser.add_argument('--output-dir', type=str, default='exports', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--skip-export', action='store_true', help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤')
    args = parser.parse_args()

    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    async for session in get_async_session():
        try:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥—ã
            distributor = CodeDistributor(session, args.session_id)
            await distributor.distribute_all()

            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            if not args.skip_export:
                exporter = ExcelExporter(session, args.session_id, args.output_dir)
                await exporter.export_all()

        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            await session.rollback()
        finally:
            await session.close()


if __name__ == "__main__":
    asyncio.run(main())
